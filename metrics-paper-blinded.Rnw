\documentclass[12pt]{article}
\usepackage{natbib}
\usepackage{color}
\usepackage[dvipsnames,svgnames*]{xcolor}
\usepackage{array}
\usepackage[colorlinks=TRUE, linkcolor=blue, citecolor = brown]{hyperref}
\usepackage{wrapfig,float}
\usepackage{subcaption}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{dsfont}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{url}
\usepackage{ulem}
\usepackage[section]{placeins}
\usepackage{afterpage}
\usepackage{setspace}

\graphicspath{{figure/}}
\DeclareGraphicsRule{.tif}{png}{.png}{`convert #1 `dirname #1`/`basename #1 .tif`.png}

\newcommand{\blue}[1]{{\color{blue} #1}}
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\dc}[1]{{\color{orange} #1}}
\newcommand{\green}[1]{{\color{cyan} #1}}

\newtheorem{thm}{Theorem}[section]
\newtheorem{dfn}{Definition}[section]
\newtheorem{cor}{Corollary}[thm]
\newtheorem{con}{Conjecture}[thm]

% NOTE: To produce blinded version, replace "0" with "1" below.
\newcommand{\blind}{1}

% DON'T change margins - should be 1 inch all around.
\addtolength{\oddsidemargin}{-.5in}%
\addtolength{\evensidemargin}{-.5in}%
\addtolength{\textwidth}{1in}%
\addtolength{\textheight}{1.3in}%
\addtolength{\topmargin}{-.8in}%


\begin{document}

\doublespacing


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\if0\blind
{
  \title{\bf Measuring Lineup Difficulty By Matching Distance Metrics with Subject Choices in Crowd-Sourced Data}
\author{Niladri Roy Chowdhury\thanks{
    The authors gratefully acknowledge funding from the National Science Foundation Grant DMS \#1007697. All data collection has been conducted with approval from the Institutional Review Board IRB 10-347.}\hspace{.2cm}\\
    Biometrics and Data Management, Novartis Oncology\\
    and \\
    Dianne Cook\\
    Department of Econometrics and Business Statistics, Monash University \\
    and\\
    Heike Hofmann\\
    Department of Statistics and Statistical Laboratory, Iowa State University\\
    and\\
    Mahbubul Majumder\\
    Department of Mathematics, University of Nebraska--Omaha\\}
  \maketitle
} \fi

\if1\blind
{
  \bigskip
  \bigskip
  \bigskip
  \begin{center}
    {\LARGE\bf  Measuring Lineup Difficulty By Matching Distance Metrics with Subject Choices in Crowd-Sourced Data}
\end{center}
  \medskip
} \fi

\bigskip
\begin{abstract}
Graphics play a crucial role in statistical analysis and data mining. Being able to quantify structure in data that is visible in plots, and how people read the structure from plots is an ongoing challenge. The lineup protocol provides a formal framework for data plots, making inference possible. The data plot is treated like a test statistic, and lineup protocol acts like a comparison with the sampling distribution of the nulls. This paper describes metrics for describing structure in data plots, and evaluates them in relation to the choices that human readers made during several large Amazon Turk studies using lineups. The metrics that were more specific to the plot types tended to better match subject choices, than generic metrics. The process that we followed to evaluate metrics will be useful for general development of numerically measuring structure in plots, and also in future experiments on lineups for choosing blocks of pictures.
\end{abstract}

\noindent%
{\it Keywords:}  data visualization, statistical graphics, data mining, data science, information visualization, cognitive perception, distance metrics, exploratory data analysis, visual inference
<<setup, echo=FALSE, results='hide', message=FALSE, warning=FALSE>>=
library(reshape2)
suppressMessages(library(ggplot2))
library(fpc)
library(grid)
library(nullabor)
library(dplyr)
theme_lineup <- theme(axis.text = element_blank(), 
                      axis.title = element_blank(),
                      axis.ticks = element_blank(),
                      plot.margin=unit(c(0,0,0,0), unit="cm"))
@

\section{Introduction} 
The lineup protocol was introduced by \citet{buja:2009} to bring data visualisation into the formal statistical inference framework. The fundamental idea is that a data plot is a test statistic, for a null hypothesis that is often implicitly specified by the choice of plot. Crowd-sourcing can be used to evaluate how far the data plot (test statistic) is from null plots. If the data plot is discoverable it is evidence against the null hypothesis. It would seem obvious that metrics might be also applied to comparing differences between plots that eventually may be used to supplant the crowd-sourcing, or to understand how the human visual system processes data plots. This paper explores the relationship between some common metrics for images with what subjects selected in several large Amazon Turk~(MTurk)~\citep{turk} crowd-sourcing studies that utilised the lineup protocol.

<<turk2, echo=FALSE, results='hide'>>=
turk2 <- read.csv("data/raw_data_turk2.csv")
lp <- subset(turk2, pic_name == "plot_turk2_100_450_12_3.png")
lpu <- unique(lp[,c("id", "response", "response_no", "plot_location")])
@
Figure~\ref{lineup-example} shows a lineup from a study described in \citet{majumder:2011}. It is based on simulated data to examine the similarity of results derived from the lineup protocol and those derived from a classical $t$-test. Pseudo-data plots were generated with specific structure in a linear model, controlling $\beta_k, \sigma, n$ (slope, variation and sample size). And null plots were generated from a null hypothesis $\beta_k=0$. In this field of plots one is a pseudo-data plot, $\beta_k\neq 0$, and the remaining 19 are null plots. Subjects were asked a very specific question in this study -- ``Which plot has the steepest slope?'' -- in order to make comparisons with the classical test. (In practice, when using the lineup protocol, subjects are generically asked to select the plot that is most different from the others, so that the value of graphics to discover the unexpected can be utilized.) The pseudo-data plot in this lineup is \#2. In the MTurk study, \Sexpr{sum(lpu$response)} out of \Sexpr{nrow(lpu)} subjects, who evaluated this lineup, selected this plot. This would produce a (visual) $p$-value of 0, leading to the conclusion that the null hypothesis should be rejected. 
\begin{figure}[!t]
\centering
% This is a lineup from plot_turk2_100_450_12_3.png
<<lineup, dependson='setup', fig.width=6, fig.height=6, out.width='0.7\\textwidth', echo=FALSE>>=
lps <- read.table("data/turk2/dat_turk2_100_450_12_3.txt", header=TRUE)
mlps <- melt(lps, id.var="X", measure.var=2:21)
mlps$variable <- as.numeric(gsub("X", "", mlps$variable))

qplot(X, value, data=mlps, alpha=I(0.5), facets=~variable, size=I(2.5)) + 
  geom_smooth(method="lm", se=FALSE, size=1.25, alpha=0.05) +
  theme_lineup + theme(aspect.ratio=1)
@
%\centerline{\includegraphics[width=.8\textwidth]{lineup-protocol-example.pdf}}
\caption{Example lineup plot of size $m = 20$ of scatterplots with overlaid regression line, fro a simulation study to compare the protocol with the classical $t-$test of $H_o: \beta_k = 0$, where covariate $X_k$ is continuous. One of the plots in the lineup is the plot of the pseudo-data, generated from a model where $\beta_k\neq 0$, and the others are null plots generated by simulating data from the null distribution $\beta_k = 0$. Which plot has the steepest slope? }
\label{lineup-example}
\end{figure}

Figure~\ref{compare} illustrates the difference between the classical test, and the lineup protocol, for the example shown in Figure~\ref{lineup-example}. In the lineup protocol, a finite set of draws from the sampling distribution is used for comparison, as opposed to the full distribution for the classical test. To be clear, in practice we do not know the sampling distribution -- this is a special case, where the lineup was produced under a classical scenario, and we know where the pseudo-data plot and the null plots fall in regard to the known sampling distribution. Also, in practice with crowd-sourcing many lineups can be generated, so the data plot can be compared to more than 19 nulls. The left plot shows the classical testing setup, where the null hypothesis is rejected as the calculated test statistic falls in the shaded region. In contrast, with the lineup protocol, the null hypothesis is rejected if the human observers unqeuivocally identify the data plot. In this example, we would expect the observers would identify the data plot, marked by \#~16, because it corresponds to an extreme value on the sampling distribution. 
\begin{figure}[!t]
\centering
\begin{subfigure}[t]{0.49\textwidth}
  \caption{Classical Inference}
\vspace{-.1in}
  \includegraphics[width=\textwidth]{diagram.pdf}
\end{subfigure}
\begin{subfigure}[t]{0.49\textwidth}
  \caption{Visual Inference}
\vspace{-.1in}
  \includegraphics[width=\textwidth]{visual-inference-plot-1.pdf}
\end{subfigure}
\vspace{-.2in}
\caption{If the lineup protocol was to be used instead of classical inference this is what it would look like. (a) Rejection region (shaded in red) for classical inference for $H_0: \mu=\mu_0$ vs $H_a:\mu>\mu_0$  and (b) values corresponding to the true value (red) and the null plots (blue) in a single lineup of size $m=20$ that would be used to test the same null hypothesis.  The actual  data plot is extreme relative to the null plots, and observers would likely be able to pick it out, resulting in a decision to reject the null hypothesis. In practice, the lineup protocol would not be used if a classical test can be used. } 
\label{compare}
\end{figure}

To date, more than 20 studies have been conducted utilizing the lineup protocol, primarily using MTurk. The first three experiments (described in \citet{majumder:2011}) compared the protocol to classical tests associated with fitting linear models. A later experiment examined the use of the protocol for detecting clusters in high-dimensional data \citep{roychowdhury:2013}. Each of these experiments involved a carefully controlled study where structure in plots was generated using simulation, and multiple replicates for each treatment were used. Subjects participating in the studies were experienced MTurk workers, and evaluated blocks of ten lineups. The blocks were chosen using stratified sampling. Care was taken in the studies to ensure that each subject only saw one realization of any data. For each lineup subjects selected a plot from the lineup that they felt best matched the question asked, rated how sure they had found the best match, and why they decided on their choice.  (Full details of the experimental setups and data collection are provided in the Appendix.) It is the data from these experiments (Table \ref{tbl:visual_stat}) that we now examine with a different purpose, to assess how distance metrics compare with human evaluation. All combined, this amounts to information from 1047 subjects examining 206 lineups. The questions arising from these studies are: 

\begin{itemize} \itemsep 0in
  \item Using distance metrics applied to data plots, can we get the computer choose like a human does?
  \item Do some distance metrics match how subjects choose plots better than others?
  \item Could distance metrics be used as a first pass in designing simulation experiments for the lineup protocol to group lineups into levels of ``easy'', ``moderate'', ``difficult''?
\end{itemize}

\begin{table*}[hbtp] 
\centering 
\caption{Overview of the three MTurk experiments, from which data was extracted to investigate distance metrics in relation to subject choices. } 
\begin{tabular}{m{.8cm}m{3.25cm}m{2cm}m{.5\textwidth}} 
\hline\hline 
 ID & Experiment & Test Statistic  & Lineup question \\ [0.5ex] % inserts table %heading 
\hline 
I  & Box plot & \begin{minipage}[c]{2cm} \begin{center}	\scalebox{0.12}{\includegraphics{stat_category1.pdf}} \end{center} \end{minipage} & Which set of box plots shows biggest vertical difference 
between group A and B? \citep{majumder:2011} \\
II &  Scatter plot & \begin{minipage}[c]{2cm}  \begin{center} \scalebox{0.3}{\includegraphics{stat_beta_k1.png}} \end{center} \end{minipage} & Of the scatter plots below which one shows data that has steepest slope? \citep{majumder:2011}\\
III & Group separation & \begin{minipage}[c]{2cm} \begin{center}  \scalebox{0.4}{\includegraphics{stat_separation.pdf}} \end{center} \end{minipage} & Which of these plots has the most separation between the coloured groups?  \citep{roychowdhury:2013}\\
\hline 
\end{tabular}
\label{tbl:visual_stat} 
\end{table*} 

The paper is organized as follows. %Section~\ref{sec:null} discusses the null generating mechanisms. 
Section~\ref{sec:dists} starts by defining distance measures and discussing different choices of measures. The distribution of the distance measures are studied in Section~\ref{sec:distri}. Section~\ref{sec:plot_type} describes the effect of the plot type and the question of interest on the distance measure while Section~\ref{sec:eval} talks about the distance evaluations. %In Section~\ref{sec:nbin}, the methods to select the number of bins for the binned distance is described. 
Section~\ref{sec:results} presents a comparison of the distance measures to the performance of human subjects in several experiments conducted with MTurk.

%%%%%
%Graphics are an important component of big data analysis, providing a mechanism for discovering unexpected patterns in data. Pioneering research by \citet{gelman:2004}, \citet{buja:2009} and \citet{majumder:2011} provide methods to quantify the significance of discoveries made from visualizations. %Although, there have been major advances in statistical graphics over the years, for example, systems like R \citep{R} provide high quality static graphics, and very recently some access to interactive graphics. But the problem remains that graphics are not widely considered to be a part of inferential statistics. 
%\citet{buja:2009} introduced two protocols, the Rorschach and the lineup protocol, which bridge the gulf between traditional statistical inference and exploratory data analysis. The Rorschach protocol consists of a set of $m$ (usually, $m=20$) plots (called the {\it null plots}) rendered from data that is consistent with a given null model. That way, the Rorschach protocol helps to understand the extent of randomness in the null model. Under the lineup protocol, a plot of the observed data is placed randomly among a set of $m-1$ null plots.
%Human observers are then asked to  examine the lineup and to identify the most different plot. If observers identify the data plot, this is quantifiable evidence against the null hypothesis. 
%The lineup protocol places a statistical plot firmly in the framework of hypothesis tests: a plot of the data is considered to be the test statistic, which is compared against the sampling distribution under the null hypothesis represented by the null plots. 
%Obviously, the null generating mechanism, i.e.\ the method of obtaining the data for null plots, is crucial for both the lineup and the Rorschach protocol. 
%The null hypothesis directly affects the choice of null generating method. 
%Null generating methods are typically based on (a) simulation, if the null hypothesis allows us to directly specify a parametric model, (b) sampling, as for example in the case of large data sets, or (c) permutation of the original data \citep[see e.g.\ ][]{Good05}, which allows for non-parametric testing  that preserves marginal distributions  while ensuring independence in higher dimensions. 
%In the experimental data that we analyzed the null generating methods used were permutation methods and direct simulation from a null model.

%The lineup protocol was formally tested in a head-to-head comparison with the equivalent conventional test in \citet{majumder:2011}. The experiment utilized human subjects from Amazon's Mechanical Turk \citep{turk} and used simulation to control conditions. The results suggest that  visual inference is comparable to conventional tests in a controlled conventional setting. This provides support for its appropriateness for testing in real exploratory situations where no conventional test exists. Interestingly, the power of a visual test increases with the number of observers engaged to evaluate lineups, and the pattern in results suggests that the power will provide results consistent with practical significance \citep{kirk:1996}.


%Figure~\ref{lineup-example} gives an example of one of the lineups used in a head-to-head comparison with classical testing (results are discussed in more detail in section~\ref{sec:turk2}). 
%
%Suppose we have the following statistical model
%
%$$Y_i = \beta_0 + \beta_1 X_{i1} + \beta_2 X_{i2} + \dots + \epsilon_i$$
%
%\noindent and we are interested in testing the following hypothesis:
%
%$$H_o : \beta_k = 0 \qquad \qquad \hbox{vs} \qquad \qquad H_A: \beta_k \ne 0$$
%
%\noindent where $X_k$ is a continuous covariate. Assume, the data plot is a scatterplot of $Y$ against $X_k$ with a regression line overlaid. We can generate null plots from rendering simulating data from $N(X\hat{\beta}, \hat{\sigma}^2)$ and plotting using the same scatterplot method as the true data, where parameter estimates ($\hat{\beta}, \hat{\sigma}^2$) are obtained by fitting the null model to the true data. 
%The plot of the true data is randomly placed among a set of ($m$ - 1) null plots to produce a lineup of size $m$. Rather than to identify the most different plot, human subjects are asked to identify the plot with the steepest slope from the lineup of Figure~\ref{lineup-example}. If the human subjects can identify the plot of the true data, we reject the null hypothesis and conclude that there is a significant linear relationship between $Y$ and $X_k$. 
%For the example of this lineup \Sexpr{sum(lpu$response)} out of \Sexpr{nrow(lpu)} observers correctly identify plot~\#2 as the data plot, providing very strong evidence of a linear relationship.

%In traditional hypothesis testing, the sampling distribution of a test statistic is functional and continuous. In the lineup protocol, although conceptually we may have an infinite collection of plots from the null distribution, in practice, we can only evaluate against a finite number of null plots. A human judge has a physical limit on the number of plots they can peruse. This poses one of the issues with using the lineup protocol.  Figure~\ref{compare} illustrates the difference. In traditional inference, the black curve represents the sampling distribution for the $t$-distribution under the null hypothesis, and the shaded red area shows the rejection region. 


%Plots are used as test statistics in visual inference, which are, unlike their traditional counterparts, not simple numbers but more complex entities. We can, however, calculate the value of the test statistic based on the data underlying the true plot, as well as the corresponding value for each of the null plots.
%These values are shown using the red bar (data plot) and the blue bars (null plots) in Figure~\ref{compare}.
%Effectively,  in visual inference the red line is compared  to only these finite number of blue lines  to make a decision, unlike classical inference where we look at the rejection region (Figure~\ref{compare}) to make decisions. Even though the data plot might be extreme, it is possible by randomly selecting from the null distribution, to obtain a null plot that is more extreme, as Tukey suggested \citep{fernholz03}:

%\begin{quotation}
%``There [in Tukey's Data Analysis class] I discovered that [...]  a random sample is indeed a ``batch of values'' which ``fail to be utopian'' most of the time.''
%\end{quotation}


%{\color{red}***Point 2: Use metrics to ensure that a range of comparisons is made available to observers}

%This can be partially solved by having a large number of observers, who each evaluate lineups constructed using different null plots. Having some idea of the type of coverage of the sampling distribution that is provided by the lineups would be useful ahead of engaging observers and evaluating the lineups. Could we say that lineup X is expected to be ``difficult'' but lineup Y is expected to be ``easy''? This information might then help in  planning other aspects of the experiment such as e.g.\ determining an appropriate number of observers. Intuitively, a difficult lineup is one where the data plot is similar to the null plots, while the data plot in an easy lineup  has some feature that makes it stand out from the null plots. Being able to compute a distance metric based on features of the plot would be very helpful ahead of running a lineup protocol.

%Researchers needs to provide a range of comparisons to observers to judge. An efficient design of experiment would be to provide a range of lineup plots with varying difficulty to the human subjects to look at. So far the difficulty of a lineup can be evaluated based on the performance of the subjects. The performance of the subjects can be analyzed after the experiment. But as a researcher, it would be interesting to have an idea about the difficulty of the lineups even before the experiment is conducted so the subjects see a set of lineups with varying difficulty. Distance metrics can be of great help in this case. 


%To avoid basing conclusions on artifacts introduced by a `bad' sample, we need to be aware of properties of this set of null plots. In this paper, we develop techniques that help to determine the quality of the lineup. A variety of distance metrics measuring the ``closeness'' of the true data plot and the null plots, and the null plots with themselves are examined. These are compared to human subject picks in several Amazon Turk studies.  Describing plots numerically, is something  of an oxymoron, it cannot be done. Nonetheless, the distance measures provide indications of the quality of a lineup. The purpose of this paper is to help determine if a lineup might provide inadequate coverage of the full null distribution, and these measures might help to gain more insight on how the human eyes work in reading statistical graphics. 

%{\color{red} ***  Point 3: Metrics might replace human observers, eventually, but as of now, human eye can still beat numbers for finding unexpected patterns. The lineup protocol gives us a chance to evaluate metrics to finding unexpected structures - check out the scagnostics literature}

%This is a two way process: As metrics are devised to measure the quality of a lineup, the lineup protocol also provides an opportunity to measure the performance of a metric. The human eye can detect patterns in a plot that cannot be easily quantified numerically, which is why graphics provide an important tool for exploring data and finding the unexpected. Describing plots numerically, is something  of an oxymoron, it cannot be universally done. An example of past work are {\it scagnostics}, short for scatterplot cognostics \citep{tukey:1977}, which were further investigated in form of graph-based scagnostics \citep{wilkinson2005graph}. Both attempt to assess various aspects of scattered points like outliers, shape, trend, density and coherence.  If a scatterplot has just one of these structures the scagnostics are descriptive, however, they fail terribly if a plot contains more than one or an unforeseen feature instead. The goal here is to find  distance measures that can provide an indication of the quality of a lineup, and then to use the results of observer evaluation to determine which metrics best reflect what features of a plot people see and assess for their choice.

%{\color{red} *** Point 4: Metrics can help us understand what it is that people pick up on to trigger a detection of the data. Currently lineups rely on people verbally reporting why they picked a plot. }

%Following up on choices, observers are asked to describe their reasoning. These reasons are used to obtain more information about the rejection: was it some nonlinear dependency, an outlier, clustering or something else that triggered the detection of the data plot? Good distance metrics may also help to relate the descriptive words used to mathematically defined features. 

%The article is organized as follows. %Section~\ref{sec:null} discusses the null generating mechanisms. 
%Section~\ref{sec:dists} starts by  defining distance measures and discussing different choices of measures (see Section~\ref{sec:meas}). The distribution of the distance measures are studied in Section~\ref{sec:distri}. Section~\ref{sec:plot_type} describes the effect of the plot type and the question of interest on the distance measure while Section~\ref{sec:eval} talks about the distance evaluations. %In Section~\ref{sec:nbin}, the methods to select the number of bins for the binned distance is described. 
%Section~\ref{sec:results} presents a comparison of the distance measures to the performance of human subjects in several experiments conducted by Amazon's Mechanical Turk.

% We also calculate the distance matrices between the null plots to see how close are the null plots to each often. Finally a percentile value is calculated to find how often such a distance appears in a lineup and a z-score of the different distances is calculated to get a measure on the closeness between the null plot and the actual plot and also compare between two different lineups.  


%\red{the next three paragraphs might be important, but you loose focus - you want to come as fast as possible to the problematic of the paper, e.g.:}

%For two different visual test statistics of the same true data, the one  is better, in which a specific pattern is more easily distinguishable visually. \\ \\

%\red{Before distance measures are introduced, introduce the problem of why we look at these distances in the context of permutation tests. }
%The difference between a regular permutation test and a graphical test under the line-up protocol, is that we are comparing the true value of the test statistics (i.e. the plot of the true data) to a finite sample of the sample distribution.

%{\color{red} Things to add:
%\begin{enumerate}
%\item Null-generating mechanisms  
% \hh{sorry, I guess I interfered with that - I moved pieces of the section on null generating mechanism into the intro and some into the discussion of the results.}
%\item Dependence on Question of Interest - in general should not be a problem because the question is ``which is different? ". But for data from Turk study, questions were quite focussed.
%\item Interplay between type of plot and distance metric - calculation on data vs graphical elements. For example, scatterplot vs reg line distance
%\item Distance metric distribution calculation eg permutation
%\item Selection of the number of bins
%\end{enumerate}}


% \section{Null Generating Mechanism} \label{sec:null}
% 
% \hh{XXX at the moment this section is not fitting in properly: it is too long and detailed to go into the intro, but it does not contain novel work to allow to go at a later point. I would suggest to extract a small paragraph on the importance of the null generating mechanism for the intro and  a detailed discussion of the null generating mechanism used at the beginning of each subsection in the experiments. XXX}
% 
% The lineup protocol embeds the true data plot among a set of null plots. The method of obtaining the data for these null plots is called the null generating mechanism. %These null plots are obtained from the null distribution in a method consistent with the null hypothesis. 
% The null hypothesis directly affects the choice of null generating method. In the experimental data that we analyzed the null generating methods used were:
% \begin{enumerate}
% \item {\bf Permutation:} Because of its versatility, this is a commonly used apporach. Permutation is used to break the association between two or more variables, and thus is appropriate when the null hypothesis is that there is no association. Consider two variables $X_1$ and $X_2$. Either $X_1$ or $X_2$ is permuted while keeping the other variable fixed. Any association between $X_1$ and $X_2$ is broken in the process altering the joint distribution between the variables, whereas the marginals of $X_1$ and $X_2$ remains the same. The method works in situations where one or both the variables are continuous or categorical. Let us consider a case where we have one categorical variable, say, Group and a continuous variable. Let us assume that the variable Group has two levels (say, A and B) and we want to test whether there is any significant difference between the two groups, i.e.\ $H_o: \mu_A = \mu_B$. To generate the null data, the values of the variable Group are permuted keeping the continuous variable fixed. If there is a difference between the two groups, this difference is broken by the permutation, and any difference observed in the permuted data is consistent with random variation.
% \item {\bf Simulation under a null model:} Sometimes there is a model underlying the problem being studied. In this situation simulating from the model will be the null generating mechanism.  The parameter estimates are obtained from  fitting  the model to the true data. Data is then generated using the parameter estimates. Let us assume that we are interested in testing whether there is any significant linear relationship between two continuous variables $X_1$ and $X_2$. Hence, we test for $H_o : \beta_1 = 0$ versus $H_a: \beta_1 \ne 0$. Under the null hypothesis, we fit the following model to the data:
% $$Y = \beta_0 + \varepsilon$$
% where $\varepsilon \sim N(0, \sigma^2)$. The parameter estimates of $\beta_0$ and $\sigma^2$ are obtained and null data is generated from $N(\widehat{\beta_0}, \widehat{\sigma}^2)$. 
% %\item \red{*** Not used by us, so exclude for now} Simulation from a specific distribution:  When the null hypothesis is that the data comes from a specific distribution, this distribution can be used to simulate new samples that generate the null plots. The parameters for the null distribution are obtained from the estimates calculated using the data. For example, suppose we want to test whether data comes from a Normal distribution, $H_o:$ data $\sim$ Normal vs. $H_A:$ data $\nsim$ Normal, then the null data are generated from the Normal distribution with mean and standard deviation equal to the estimated mean and standard deviation from the data. 
% \end{enumerate} 

%Other null generating mechanisms might be utilized depending on the null hypothesis underlying a data plot. 

\section{Distance Measures}\label{sec:dists}
%\subsection{} \label{sec:meas}
The goal of the metrics is to measure the ``distance'' between two plots. In particular, we would like to know how similar or different is the data plot from the surrounding null plots. 

A naive approach would be to use existing goodness-of-fit statistics that compare data with reference probability distributions, for example, the Kolmogorov-Smirnov \citep{stephens:1974}, Anderson-Darling \citep{stephens:1974}, Shapiro-Wilk \citep{shapiro:1965} tests and Bhattacharyya distance \citep{bhattacharyya:1946}. However, these measure differences between univariate distributions which limits their applicability to distances between plots, generally. Bhattacharyya distance is used for image processing but not in manner useful for plot comparisons.
%By calculating the ``distance'' between plots we may be able to determine if a lineup should be easy -- if the actual data plot is detectably different from the null plots -- and also to better understand what aspect of the plot people use to make their choice. It is not an easy task to measure the difference between plots. Here we examine several possibilities. 
%The problem could be tackled by considering the data as a reference distribution, and compare all of the null sets with this reference. Comparing data with a reference probability distribution or comparing two datasets are common statistical tasks. For example, the Kolmogorov-Smirnov test \citep{stephens:1974} sorts values in two samples, computes the empirical distribution function of each and compares these two, to determine if the two samples are likely to have come from the same distribution.  The Anderson-Darling \citep{stephens:1974} and Shapiro-Wilk \citep{shapiro:1965} tests compare datasets with normal probability distributions. These measure differences between univariate distributions which limits their applicability to distances between plots, generally. 
Hausdorff distance \citep{huttenlocher:1993} has been successfully used for comparing images. It effectively matches points between sets and computes the distances between the matched points, but it is prohibitive computationally. 

Along these lines, \citet{hannig:2013} developed a metric for comparing two images, based on one developed by \citet{Baddeley:1992}. Comparing two images is different from comparing two data plots, where only essential plot elements are compared, so this metric is not useful comparing data plots generally. \citet{marron:1995} describes metrics for comparing two curves developed because the results from smoothing, based on classical mathematical norms do not match how the eye perceives the difference. This is too specialized. Actually, the lineup protocol could be utilized to rigorously substantiate the work in these papers. 

In many practical uses of the lineup protocol, permutation can be used to generate data for the null plots in a lineup. This was employed in the study done in experiment III. Hamming distance \citep{hamming:1950} calculates how different the permutations are, by measuring the minimum number of substitutions it takes to get from one permutation to another. It was one of our initial choices of distances, but it did not do well at distinguishing data plots from null plots, probably because it does not compare differences between the actual numbers, so we abandoned it. 

{\em Aside:} Bootstrap is not typically used to generate null data, because sampling with replacement would typically generate almost identical null plots. The data plot would be identifiable because it has more observations. 

Interpoint distance metrics, developed for cluster analysis, are fast to compute. These can be adapted to measuring structure in plots. For example, when the purpose is to compare two scatterplots containing clusters, we might calculate the smallest intercluster distance for both plots, and then use this to determine which plot exhibits the strongest clustering. This distance, together with various other measures to calculate distances between groups is implemented in the R package {\tt fpc} \citep{hennig:2010}. Figure~\ref{sep-dist} illustrates choices of metrics for measuring clustering. These are especially applicable to data from experiment III. The method can be adapted more broadly to different types of plots. For example, to measure the structure in a graph of side-by-side boxplots of two groups. The graphical features of the plot are the two five number summaries represented by the boxplots. An interpoint distance measuring the difference between the two sets of five points, can determine which plot exhibits the biggest difference between the two groups.

\begin{figure}[!t]
<<data-prep-ex, echo=FALSE>>=
dat <- read.table("data/turk7/dat_large_p_small_n_30_40_0_2_3.txt", header = T)
five <- subset(dat, .sample == 5)
#library(fpc)
cstats <- cluster.stats(dist(five[,1:2]), clustering = five$cl)
@
\centering
\begin{subfigure}[t]{0.24\textwidth}
\caption{\label{type1_minsep} \scalebox{0.8}{Minimum Separation}}
%\includegraphics[width=\textwidth]{min-sep-example.pdf}
<<min_sep_ex, dependson='data-prep-ex', echo = FALSE, fig.width = 4, fig.height = 4, out.width = '\\textwidth'>>=
first <- five[which(five$cl == 3 & five$X2 < 1),]
second <- five[which(five$cl == 2 & five$X1 < 0.75),]
third <- five[which(five$cl == 1 & five$X1 > -0.75 & five$X2 > -1.1),]
fourth <- five[which(five$cl == 2 & five$X1 < 0.8 & five$X2 < (-0.3)),]
qplot(X1, X2, data=five, colour=factor(cl), size=I(3)) + 
  theme(legend.position = "none", aspect.ratio = 1) +
  geom_segment(x=first$X1, y=first$X2, xend=second$X1, yend=second$X2, colour="black") +
  geom_segment(x=third$X1, y=third$X2, xend=fourth$X1, yend=fourth$X2, colour="black")
@
\end{subfigure}
\begin{subfigure}[t]{0.24\textwidth}
\caption{\scalebox{0.8}{Average Separation}\label{type_2_avesep}}
%\includegraphics[width=\textwidth]{ave-sep-example.pdf}
<<ave_sep_ex, dependson='data-prep-ex', echo = FALSE, fig.width = 4, fig.height = 4, out.width = '\\textwidth'>>=
library(reshape2)
five <- five[order(five$cl),]
five$id <- rep(1:10, 3)
lines <- data.frame(dcast(five, id ~ cl, value.var = "X1"),
                    dcast(five, id ~ cl, value.var = "X2")[,-1])
names(lines) <- c("id", paste0("X1",1:3), paste0("X2", 1:3))

qplot(X1, X2, data=five, colour=factor(cl), size=I(3)) + 
  theme(legend.position = "none", aspect.ratio = 1) + 
  geom_segment(aes(x=X11, y=X21, xend=X12, yend=X22), data=lines, colour="black", alpha= I(0.5)) + 
  geom_segment(aes(x=X13, y=X23, xend=X12, yend=X22), data=lines, colour="black", alpha=0.5) + geom_segment(aes(x=X13, y=X23, xend=X11, yend=X21), data=lines, colour="black", alpha=0.5)
@
\end{subfigure}
\begin{subfigure}[t]{0.24\textwidth}
\caption{\scalebox{0.8}{Cluster Mean Sep.}\label{type_2_clsep}}
%\includegraphics[width=\textwidth]{mean-sep-example.pdf}
<<cm_sep_ex, dependson='data-prep-ex', echo = FALSE, fig.width = 4, fig.height = 4, out.width = '\\textwidth'>>=
means <- five %>% group_by(cl) %>% summarize(x = mean(X1), y = mean(X2))
lines <- data.frame(means, xend=means$x[c(2,3,1)], yend=means$y[c(2,3,1)])
qplot(X1, X2, data=five, colour=factor(cl), size=I(3)) + 
  theme(legend.position = "none", aspect.ratio = 1) + 
  geom_point(aes(x=x, y=y), shape=10, data=means, size = 5, colour="black") +
  geom_segment(aes(x=x, y=y, xend=xend, yend=yend), data=lines, colour="black")
@
\end{subfigure}
\begin{subfigure}[t]{0.24\textwidth}
\caption{\scalebox{0.8}{Dunn Index}\label{type_2_dunn}}
\vfill
%\includegraphics[width=\textwidth]{mean-sep-example.pdf}
<<di_sep_ex, dependson='data-prep-ex', echo = FALSE, fig.width = 4, fig.height = 4, out.width = '\\textwidth'>>=
first <- five[which(five$cl == 3 & five$X2 < 1),]
second <- five[which(five$cl == 2 & five$X1 < 0.75),]

pairs <- data.frame(expand.grid(i=1:10, j=1:10))
pairs <- subset(pairs, i < j)

pdata <- five %>% group_by(cl) %>% do(with(., data.frame(
  cluster = cl[1],
  dist = (X1[pairs$i] - X1[pairs$j])^2 + (X2[pairs$i] - X2[pairs$j])^2,
  x = X1[pairs$i],
  y = X2[pairs$i],
  xend = X1[pairs$j],
  yend = X2[pairs$j]
)))
maxSpread <- pdata[which.max(pdata$dist),]

qplot(X1, X2, data=five, colour=factor(cl), size=I(3)) + 
  theme(legend.position = "none", aspect.ratio = 1) +
  geom_segment(x=first$X1, y=first$X2, xend=second$X1, yend=second$X2, colour="black") +
  geom_segment(data=maxSpread, aes(x=x, y=y, xend=xend, yend=yend), colour="black")
@
\end{subfigure}

	\vspace{-.1in}
\caption{Illustration of four different distance metrics for cluster separation. Minimum Separation (a) calculates the minimum distance between points of each cluster from the other clusters. Average separation (b) calculates the average distance of each point in a cluster to the other clusters. Cluster mean distance (c) sums the distances between the means of each cluster. The Dunn index (d) is based on a comparison of minimal separation between clusters (as shown in  (a)) and maximal cluster diameter.}
\label{sep-dist}
%{Caption of subfigures \subref{fig:subfig1}, \subref{fig:subfig2} and \subref{fig:subfig3}}
\end{figure}


%two graphs containing side-by-side boxplots, a distance metric that focuses on group separation calculated on each data set might be useful. Bhattacharyya distance \citep{bhattacharyya:1946} is widely used in image processing, for feature extraction. This distance, together with various other measures to calculate distances between groups is implemented in the R package {\tt fpc} \citep{hennig:2010}. % contains many different ways to calculate distances between groups. 

After trialing many of these distance, we report on the results from just a few metrics, that performed best. One approach was the interpoint distances, adapted to the displays used in experiments I-III, and the other a simple relatively simple distance based on binned frequencies (illustrated by Figure \ref{first-example}), which is generalizable to most data plots. 
%In the analyses of the experimental data of this paper, we used a dual approach: one distance that we employed for all examples is a relatively simple distance based on binned frequencies, which works fairly well in most circumstances.
%Ultimately, a very simple binned distance was used in the analyses of the MTurk data, which worked fairly well in most circumstances. 
%However, it was clear immediately that plot design, and the question asked, has a large impact on how a plot is read, and specific distance metrics designed for specific plot types and tasks are needed. In order to more closely reflect observers' choices in each experiment, we used at least one more distance tailored to each of these special situations.
A summary of distance metrics follows, along with a procedure for computing the empirical distribution of the distance metrics, that can is used to measure the distance between data plot and null plots. 

\begin{figure*}[!t]
\centering
\begin{subfigure}[t]{\textwidth}
\caption{Dataset $X$ with two variables $X_1$ and $X_2$ \label{type_1}}
\includegraphics[scale=0.55]{dat-example-1.pdf}
\includegraphics[scale=0.55]{bin-example-1.pdf}
\includegraphics[scale=0.55]{freq-example-1.pdf}
\end{subfigure}

\begin{subfigure}[t]{\textwidth}
\caption{ Dataset $Y$ with permuted $X_1$ and original $X_2$ \label{type_2}}
\includegraphics[scale=0.55]{dat-example-2.pdf}
\includegraphics[scale=0.55]{bin-example-2.pdf}
\includegraphics[scale=0.55]{freq-example-2.pdf}
\end{subfigure}
\label{first-example}
	\vspace{-.1in}
       \caption{Illustration of binned distance for data with a strong positive association (a), and the same data where variable $X_1$ has been permuted (b). The scatterplot of the data is shown (left) along with a binned view of the data (center) and the cell count matrix $C$ (right). Binned distance is the Euclidean distance of these counts. The binned distance between these plots is 6.4807. }
\label{first-example}
%{Caption of subfigures \subref{fig:subfig1}, \subref{fig:subfig2} and \subref{fig:subfig3}}
\end{figure*}

\subsection{Distance metrics}\label{sec:distmet}

A sketch of the distance metrics is provided here, with full details available in the Appendix.

\begin{enumerate}

\item {\bf Binned Distance (BN):} compares the cell counts from binned data. This distance can be calculated for univariate continuous data, bivariate data with two categorical variables, or data with one continuous and one categorical variable. For a categorical variable, we choose the number of bins  to be equal to the number of categories.

Binned distance is highly susceptible to small differences in values and depends on the number of bins as well as the anchor point (bottom left corner of first cell). It is necessary to find the optimal number of bins in each direction. For our purposes `optimal' was defined as the number of bins that produced the largest detectable difference between data plot  and null plots, compared to the biggest difference between any pair of null plots. Details of these choices on various different data sets can be found in the Appendix.

Several variations to this distance are possible, such as a change to using kernel density estimates, a change from $L_2$ to $L_p$ based distance, or using transformations on the counts. All of these changes will affect distances, and might lead to qualitatively different conclusions.
Hausdorff distance \citep{huttenlocher:1993} was also examined, but the binned distance is computationally efficient and performed as well as the Hausdorff as a rough, generic measure of similarity of plots.

\item {\bf Distance based on boxplots (BX):} is specifically designed for side-by-side boxplots based on only their graphical elements corresponding to the three points defining the boxes of a boxplot. It makes the assumption that subjects focus on the difference in the boxes. Variations on this might include adding whiskers' values, the number or values of outliers, or including higher-order letter values \citep{tukey:1977, lvplot} for more exact tail specifications. 

\item {\bf Distance based on the regression line (RG):} Many times, to examine association between two variables a regression line is overplotted on the points of a scatterplot. This distance was developed to help assess if the observer is paying attention to the line or the spread of points. The metric bins the data, and compares the intercept and slope of the regression line computed in the bins. Variations might include using slope alone, or absolute value of slope. 
\item {\bf Distance based on separation between multiple groups (MS, AS, DS, CM):} using minimum separation (MS), average separation (AS), Dunn separation (DS) and distance between cluster means (CM) are considered. 
\end{enumerate}


% How well each distance measure matches the observers' responses depends  on the question of interest.  
% But, in general, this should not be a problem because the question which is typically asked is ``Which plot among these is different?''. In the MTurk experiments, more focused questions were asked because the purpose was very specific, to compare visual inference with classical inference.
% 
% \hh{XXX wouldn't a more tailored question be easier to match with a tailored distance? }

Generally to compare different distance measures their empirical distribution are used.

\subsection{Empirical Distribution of Distance Metrics} \label{sec:distri}

For a given lineup of size $m$, the empirical distribution of distance metrics is obtained by calculating the distances between the null plots among themselves. One null data is generated using the null generating mechanism, and labelled to be the ``true'' data set, then a number of null data sets are generated and the distances between these datasets are calculated. Averaging all these distances yields one single distance value. This process is repeated a large number of times, say, $N$ between 1,000 to 10,000. Finally $N$ mean or average distances are obtained which gives the empirical distribution of the distance. For comparing data plot with nulls using the empirical distribution of the distance metric, we use the following algorithm:

\begin{enumerate} \itemsep 0in
\item Calculate the distance between the true data and all the null datasets and take the average of these distances. 

\item For each of the ($m$ - 1) null datasets, calculate the distance between the null data and all the other ($m$ - 2) null datasets and obtain the average distance. Hence, we obtain ($m$ - 1) distances, one corresponding to each  null plot.

\item Generate a lineup of size $m$ using the null generating mechanism. 
Single out one of these nulls as the `data' plot, and calculate the distances as described in steps (1) and (2). Repeat this procedure $N$ times.

\item The $N$ distance values then represent the empirical distribution of the distance metric and are used for making comparisons
\end{enumerate}

The observed test statistic is  compared to the empirical distribution, as shown in Figure~\ref{compare}. The distance measures for the true dataset and the null datasets are plotted on the empirical distribution. If the distance measure of the true plot is larger than any of the null plots, the lineup might be regarded as ``easy''. Otherwise, we consider it to be a ``difficult'' lineup. For easy lineups, we would expect that most observers could detect the true data plot amongst the decoys, but that far fewer observers to be able to do so with a difficult lineup. This gives us a way to compare the actual results from the MTurk human subject studies with what we might expect given the distance metric assessment.

The empirical distribution of the distance based on regression is shown in Figure~\ref{fig:distances} using $N = 1000$ simulation runs. 
Figure~\ref{dist_1} shows the lineup plot for $m = 20$ for testing whether there exists a significant linear relationship between $X_1$ and $X_2$. The 19 null plots are generated by fitting the null model and generating from the null model. Figure~\ref{dist_2} shows the general empirical distribution of distance measures based on the null model. For the particular lineup on the left, mean distances  are shown by overlaid line segments for the true plot (in orange) and the null plots (in black). The true plot is easily identifiable from the lineup (Figure~\ref{dist_1}, in the experiment 40 out of 45 observers identified the data). This is backed by the regression based distance measure seen in Figure~\ref{dist_2}, as the orange line is on the extreme right tail compared to the black lines. 

\begin{figure}[!p]
\centering
\begin{subfigure}[b]{0.55\textwidth}
\caption{\label{dist_1}Lineup: which slope is the steepest?}
%\includegraphics[width=\textwidth]{dist-example.pdf}
<<lp-reg, echo=FALSE, fig.width=6, fig.height=6, out.width='\\textwidth'>>=
# plot_turk2_100_75_5_3.png
dat <- read.table("data/turk2/dat_turk2_100_25_5_1.txt", header = TRUE) #plot_turk2_100_350_12_3.png
dat.m <- melt(dat, id = "X")
dat.m$.sample <- substring(dat.m$variable, 2)
lineup.dat <- data.frame(x = dat.m$X, z = dat.m$value, .sample = dat.m$.sample)

lineup.dat$.sample <- as.numeric(as.character(lineup.dat$.sample))

qplot(x, z, data=lineup.dat, alpha=I(0.2), facets=~.sample, size=I(2.5)) + 
  geom_smooth(method="lm", se=FALSE, size=1.25, alpha=0.05) +
  theme(aspect.ratio=1) + xlab("") +
  theme(axis.text.y = element_blank(), 
        axis.title.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.ticks.x = element_line(color="white"),
        axis.text.x = element_text(color="white"), 
        plot.margin=unit(c(0,0,0,0), unit="cm"))
@
\end{subfigure}
\begin{subfigure}[b]{0.44\textwidth}
\caption{\label{dist_2}Regression based distance metrics.
%: unscaled at the top, scaled at the bottom. \hh{XXX my suggestion would be to switch to the scaled regression based distance instead of the unscaled one.} \hh{XXX I did the switch; the top density is  now the only one in the paper, that is unscaled -- this makes most of the regression based distance with the slope only superfluous.}
}
%\includegraphics[width=\textwidth]{dist-metric.pdf}
<<turk2-distr, dependson='lp-reg', echo=FALSE, cache=TRUE>>=
obs.dat <- lineup.dat[lineup.dat$.sample == 7, ]   

#qplot(x, z, data = obs.dat, geom = "point") + geom_smooth(method = "lm", se = FALSE) 
# mod2 <- lm(z ~ 1, data = obs.dat)
mean.null <- mean(obs.dat$z) # doesn't matter
sd.null <- 5
# use null model rather than estimated sigma from data
# sd.null <- summary(mod2)$sigma

dframe <- data.frame(t(replicate(1000, {
	zz <- rnorm(nrow(obs.dat), mean=mean.null, sd=sd.null)
	samp.dat <- data.frame(group = obs.dat$x, z = zz )
	dat1 <- data.frame(t(replicate(18, {
		yy <- rnorm(nrow(obs.dat), mean=mean.null, sd=sd.null)
		null.dat <- data.frame(group = obs.dat$x, z = yy)
		
# 		b1 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, X.bin = 2, Y.bin = 2)
#  		b2 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, X.bin = 8, Y.bin = 2)
 		r.int <- reg_dist(samp.dat, null.dat,  scale=FALSE)
 		r.no.int <- reg_dist(samp.dat, null.dat, scale=TRUE)
 		return(c(reg.dist=r.int, reg.no.int.dist=r.no.int))
# 		return(c(reg.no.int.dist=r.no.int))
 		})))
	 	
 		colSums(dat1)/18
})))
@

<<turk2-lp, dependson='turk2-distr', echo=FALSE>>=
# lineup.dat from lp-box
metrics.dat <- data.frame(expand.grid(pos.1 = 1:20, pos.2 = 1:20))
metrics.dat$reg.dist <- NA
metrics.dat$reg.no.int.dist <- NA

for (i in 1:nrow(metrics.dat)) {
  P <- subset(lineup.dat, .sample == metrics.dat$pos.1[i])[,1:2]
  PX <- subset(lineup.dat, .sample == metrics.dat$pos.2[i])[,1:2]
    
  metrics.dat$reg.dist[i] <- reg_dist(P, PX, scale=FALSE)
  metrics.dat$reg.no.int.dist[i] <- reg_dist(P, PX, scale=TRUE)
}

pos <- 7

metrics.dat <- subset(metrics.dat, pos.1 != pos.2 & pos.2 != pos)

dd3 <- metrics.dat %>% group_by(pos.1) %>% summarize(
  reg.mean = mean(reg.dist),
  reg.no.int.mean =  mean(reg.no.int.dist),
  len=n())

@

<<dens-reg-dist, dependson='turk2-lp', echo=FALSE, fig.width=4.5, fig.height=4, out.width='\\textwidth'>>=
#ymax <- max(density(dframe$reg.dist)$y)
#ggplot()  + 
#  geom_density(data = dframe, aes(x = reg.dist), 
#               fill = "grey80", col = "grey80" ) + 
#  geom_segment(data = subset(dd3, len != 19), 
#               aes(x = reg.mean, xend = reg.mean, 
#                   y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
#               size=1, alpha = I(0.7)) + 
#  geom_segment(data = subset(dd3, len == 19), 
#               aes(x= reg.mean, xend = reg.mean, 
#                   y=0.005*ymax, yend = 0.2*ymax), colour="darkorange", size=1)  +
#  xlab("") + ylab("") + 
#  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
#            aes(x = reg.mean, label = pos.1)) +
#   geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
#            colour="darkorange", aes(x = reg.mean, label = pos.1)) +
#  ylim(c(- 0.04*ymax, ymax + 0.1*ymax)) 
 # theme(plot.margin=unit(c(0,0,0,0), unit="line"))

ymax <- max(density(dframe$reg.no.int.dist)$y)
ggplot()  + 
  geom_density(data = dframe, aes(x = reg.no.int.dist), 
               fill = "grey80", col = "grey80" ) + 
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = reg.no.int.mean, xend = reg.no.int.mean, 
                   y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
               size=1, alpha = I(0.7)) + 
  geom_segment(data = subset(dd3, len == 19), 
               aes(x= reg.no.int.mean, xend = reg.no.int.mean, 
                   y=0.005*ymax, yend = 0.2*ymax), colour="darkorange", size=1)  +
  xlab("") + ylab("") + 
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = reg.no.int.mean, label = pos.1)) +
   geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
            colour="darkorange", aes(x = reg.no.int.mean, label = pos.1)) +
  ylim(c(- 0.04*ymax, ymax + 0.1*ymax)) 
@
\end{subfigure}
\label{dist}
	\vspace{-.1in}
\caption{
\label{fig:distances}Illustration of the behavior of a distance metric with a lineup plot in (a) and the distribution of regression based distance metric in (b). A lineup of size $m$ = 20 is shown (left) for testing whether there exists a significant linear relationship between $X_1$ and $X_2$. The 19 null plots are obtained by simulating from the null model.  The empirical distribution of the distance metric is shown on the right and overlaid by vertical line segments for the true plot and the null plots (in orange and black, respectively).  }
%{Caption of subfigures \subref{fig:subfig1}, \subref{fig:subfig2} and \subref{fig:subfig3}}
\end{figure}

\begin{figure}[!p]
\centering
\begin{subfigure}[b]{0.55\textwidth}
\caption{\label{box-1}Lineup: which of these pairs of boxplots shows the biggest vertical difference?}
%\includegraphics[width=\textwidth]{dist-example-2.pdf}
<<lp-box, echo=FALSE, fig.width=6, fig.height=6, out.width='\\textwidth', fig.align='bottom'>>=
# directly from metrics-paper.R
dat <- read.table("data/turk1/dat_turk1_100_0_5_2.txt", header = T)  ## plot_turk1_100_8_12_2

### The detection rate for the above lineup is 0.28. But the difference for both binned distance and regression based distance are large negative.

### Melting the data

dat.m <- melt(dat, id = c("age", "grp", "weight"))

### Changing the categorical variable to a numerical variable

dat.m$x <- as.numeric(dat.m$grp) 

### Breaking the variable name to get the position and type of plot (null or obs)

dat.m$plot <- substring(dat.m$variable, 1, 3)
dat.m$position <- substring(dat.m$variable, 4, 5)

### Finding the observed data

obs <- dat.m[dat.m$plot == "obs", c("x", "value") ]
dat.m <- dat.m[, c("x", "value", "position")]
names(dat.m) <- c("group", "val", ".sample")

lineup.dat <- dat.m
lineup.dat$group <- as.factor(lineup.dat$group)
lineup.dat$.sample <- as.numeric(as.character(lineup.dat$.sample))
obs.dat <- subset(lineup.dat, .sample == 20)
levels(lineup.dat$group) <- c("A", "B")

qplot(group, val, data = lineup.dat, geom = "boxplot", col = group, 
      ylab = "", xlab = "Group") + facet_wrap(~ .sample) + 
  scale_color_discrete(name = "Group") + theme(legend.position = "none") +  
  theme(axis.text.y = element_blank(), 
                      axis.title = element_blank(),
                      axis.ticks.y = element_blank(),
                      plot.margin=unit(c(0,0,0,0), unit="cm"))
@
\end{subfigure}
\begin{subfigure}[b]{0.44\textwidth}
\caption{\label{box-2}Boxplot based distance}
%\includegraphics[width=\textwidth]{dist-metric-2.pdf}
<<lp-turk1-distr, echo=FALSE, cache=TRUE>>=
sd <- 5

df <- data.frame(t(replicate(1000, {
  	samp.dat <- data.frame(group = obs.dat$group, 
  	                       val = rnorm(nrow(obs.dat), 0, sd))

  	dat1 <- data.frame(t(replicate(18, {
  	  null.dat <- data.frame(group = obs.dat$group, 
  	                         val = rnorm(nrow(obs.dat), 0, sd))
 		b1 = bin_dist(X=samp.dat, PX=null.dat, lineup.dat = lineup.dat, 
 		              X.bin = 2, Y.bin = 2)
 		b2 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, 
 		              X.bin = 2, Y.bin = 8)
 		s = box_dist(samp.dat, null.dat)
 		 c(b22=b1, b28=b2, box=s)
  	})))
  	
 		colSums(dat1)/18
})))

# names(df) <- c("Binned-2-2", "Binned-2-8", "Boxplot Dist")
# distributions for turk1 distance measures
#write.csv(df, "distr-turk1.csv", row.names = FALSE) 
@

<<lp-box-dist-simu, dependson='lp-box', echo=FALSE>>=
dat.pos <- data.frame(expand.grid(pos.1 = 1:20, pos.2 = 1:20))

# lineup.dat from lp-box
metrics.dat <- dat.pos
metrics.dat$box.dist <- NA

for (i in 1:nrow(dat.pos)) {
  P <- subset(lineup.dat, .sample == metrics.dat$pos.1[i])[,1:2]
  PX <- subset(lineup.dat, .sample == metrics.dat$pos.2[i])[,1:2]
    
  metrics.dat$box.dist[i] <- box_dist(P, PX)
}
pos <- 20

metrics.dat <- subset(metrics.dat, pos.1 != pos.2 & pos.2 != pos)

dd3 <- metrics.dat %>% group_by(pos.1) %>% summarize(
  box.mean = mean(box.dist), len = length(box.dist))

@

<<lp-box-dist, dependson='lp-box-dist-simu', echo=FALSE,  fig.width=4.5, fig.height = 4, out.width='\\textwidth', fig.align='bottom'>>=

ymax <- max(density(df$box)$y)
ggplot()  + 
  geom_density(data = df, aes(x = box), 
               fill = "grey80", col = "grey80") +
  xlab("") + ylab("") + 
  ylim(c(- 0.04*ymax, ymax + 0.1*ymax)) + 
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = box.mean, xend = box.mean, 
                   y = rep(0.002*ymax,19), yend = rep(0.1*ymax,19)), 
               size=1, alpha = I(0.7)) + 
  geom_segment(data = subset(dd3, len == 19), 
               aes(x= box.mean, xend = box.mean, 
                   y=0.002*ymax, yend = 0.2*ymax), 
               colour="darkorange", size=1)  + 
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = box.mean, label = pos.1)) + 
  geom_text(data = subset(dd3, len == 19), y = 0.25*ymax , size = 3, 
            aes(x = box.mean, label = pos.1), colour="darkorange") +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"), axis.title=element_blank())
 
@
\end{subfigure}
	\vspace{-.3in}
\caption{\label{fig:boxes} Illustration of the behavior of a distance metric for a more `difficult' lineup. The lineup is shown in (a), the density plot on the right shows the boxplot based distance metric. Of interest is whether there exists a significant shift between the two groups. The orange line (boxplot distance of the true plot) is among the black lines of the nulls, indicating that the boxes in the true plot show no more difference than a null plot from other null plots. }
%{Caption of subfigures \subref{fig:subfig1}, \subref{fig:subfig2} and \subref{fig:subfig3}}
\end{figure}

Figure~\ref{box-1} shows a lineup of size $m = 20$ for testing whether there exists a significant difference in the group medians between A and B. The 19 null plots are generated from a null model, consisting of draws from a normal distribution.  Figure~\ref{box-2} shows the empirical distribution of the distance based on the boxplots with the mean distance for the true plot (in orange) and the null plots (in black). It is hard to identify the true plot from the lineup. During the study, only 2 out of 26 observers picked the data plot, indicating little to no evidence of a deviation from the null hypothesis. This  is also evident from the boxplot based distance measure: the orange line corresponding to the true data is mixed in with the mass of the black lines, with one null plot (16) exhibiting a lot more signal than the true plot.

\subsection{Metric Evaluation} \label{sec:eval}
%
For a lineup of size $m = 20$, the average distance of the true plot from all null plots is compared to 18 average distances between the null plots. This high dimensionality of the comparison can sometimes complicate things. A logical solution is to derive a single statistic for each lineup. Such a statistic should take both the mean distance of the true plot into account as well as the maximum of the mean distances for the null plots. Hence we define, 
\begin{enumerate}
\item {\bf $\delta$-Difference:} let $\bar{d}_.$ be the average difference of plot $.$ to all of the (other) null plots. We define the difference between the mean distance for the true plot and the maximum of the mean distances for the null plots as a measure of lineup difficulty, more specifically, 
\begin{equation}\label{eq:delta}
\delta(\ell) = \bar{d}_{\text{true}} - \max_j \left(\bar{d}_{\text{null}_j}\right)
\end{equation}
for $j = 1, \dots, (m  - 1)$ 
defines the lineup difference for lineup $\ell$.
 A positive difference  indicates that the mean distance of the true plot is larger than the maximum of the mean distances of the null plots. Hence the true plot is more extreme compared to the set of null plots in the lineup. A larger difference should make data plot identification easier. 
 Similarly, a negative difference indicates that there is at least one null plot which is more extreme compared to the true plot based on the distance metric.

However, this statistic does not imply how many null plots are more extreme than the true plot. So we define,
\item {\bf $\gamma$-Number of Extreme Nulls:}  the number of null plots which have larger mean distances than the mean distance of the true plot is noted. Mathematically, for lineup $\ell$, we define the $\gamma$-number as
\begin{equation}\label{eq:nullcount}
\gamma(\ell) = \sum_{j = 1}^{m - 1} \mathds{1}\left(\bar{d}_{\text{null}_j} > \bar{d}_{\text{true}}\right),
\end{equation}
where $\mathds{1}(.)$ is a zero/one indicator function.

$\gamma(.)$ takes integer values between 0 and $(m - 1)$. Higher values indicate more null plots being more extreme than the true plot, making it harder to identify it from the lineup.
\end{enumerate}

Another choice for comparing lineups would be to use empirical $p$-values from the empirical distribution of the distance metric. While this would enable a comparison of all the metrics for any lineups, this approach is computationally extremely expensive, in particular, because we are generally interested in the extreme values of the empirical distribution, which needs a very large number of simulation runs $N$ for a reliable estimation.

In order to assess how well a distance metric reflects observers' choices, we relate distance metric to the rate at which the data plot in each lineup is being identified. In an ideal scenario, a detection rate of 0.05 corresponds to a $\delta$-difference of zero. With an increase in $\delta$-difference we would expect a simultaneous increase in detection rate. For the evaluation of metrics in the next section, we will fit a logistic regression of detection rate in $\delta$-difference. 


\section{Experimental Results and Analysis of Metrics} \label{sec:results}

A number of experiments employing the lineup protocol were run
using the MTurk service~\citep{turk}. A complete list and access to each experiment can be found in \citet{majumder:2013}.

Some experiments are used for evaluating the power of visual inference against that of classical tests \citep{majumder:2011}, some for comparison of different designs \citep{hofmann2012graphical, loy:2015}, or for targeted conclusions based on visual inference in situations where traditional tests do not perform well \citep{tengfei:2013}. In each study, subjects were recruited through the MTurk service and were shown a set of lineups.
 For evaluating the distance metrics we used the data collected on three experiments described in Table~\ref{tbl:visual_stat}.

We evaluated the performance of the distance metrics in each of the experiments by comparing  the distances to the responses from observers. 

\subsection{Experiment I -- Side by Side Boxplots}\label{sec:turk1}
This study was designed to investigate the power of visual inference in the classical situation of assessing the significance of a co-variate $X$ in a linear model. For the first study, the assumption is that the covariate is discrete (with two levels), while in  Experiment II (see section~\ref{sec:turk2}) we assume the covariate to be continuous. 
The visual test statistic consists of side-by-side boxplots of the dependent variable against the two levels of covariate $X$. The data for the lineups comes from a model of the form $y_{i} = \mu + \beta {x_i} + \varepsilon_{i}$ where $\mu$ is an overall average, $x_i \in {1, 2}$ with $\beta_1 = -\beta_2$ is the effect for each of the two levels of $X$, and $\varepsilon_{i} \sim N(0, \sigma^2)$, independent for $i = 1, ..., n$.
The null generating mechanism is then a simplified model without the covariate, i.e.\ $\beta_1 = \beta_2 = 0$. 
Each of the subjects, recruited through the MTurk service, was asked to evaluate ten lineups, and to identify, in each one, the plot that exhibits the largest vertical difference between groups A and B. 
The type of lineup used in this experiment is shown in Figure~\ref{box-1}.

For each lineup, the detection rate is calculated based on the number of evaluations and data identifications by subjects and related to its $\delta$-difference and $\gamma$-number of extreme null plots using both the distance based on boxplots ($d_{BX}$) and the binned distance ($d_{BN}$, using 8 bins in y direction and 2 in x).  

\begin{figure}[!t]
\centering
\begin{subfigure}[t]{\textwidth}
\centering
\caption{\label{fig:turkcomp-1}Scatterplots of detection rate versus $\delta$-difference}
<<dist-box-bin, echo=FALSE, fig.width=8.5, fig.height=4.5, out.width='0.7\\textwidth', warning=FALSE>>=
res.exp1 <- read.csv("data/raw_data_turk1.csv")
results <- read.table("data/turk1-metrics.txt", header=TRUE)

res.exp1 <- subset(res.exp1, select = c(pic_name, response, plot_location, time_taken))

res.dat <- res.exp1 %>% group_by(pic_name) %>% summarize(
  prop = mean(response), 
  pos = mean(plot_location), 
  m.time = median(1.0*time_taken),
  m2.time = mean(log(1.0*time_taken)),
  n=n(),
  correct=sum(response))


metrics.sub <- subset(results, pos.1 != pos.2)

dat.merge <- merge(metrics.sub, res.dat, by = "pic_name")

dat.merge <- subset(dat.merge, pos.2 != pos)


dd <- dat.merge %>% group_by(pic_name, pos.1) %>%
  summarize(box.mean = mean(box.dist), 
            bin.mean = mean(bin.dist), 
            len = length(box.dist), 
            prop = mean(prop), 
            m.time = mean(m.time),
            m2.time = mean(m2.time),
            n=mean(n),
            correct=mean(correct))

prop.dist <- dd %>% group_by(pic_name) %>%
  summarize(
    diff.box = box.mean[len == 19] - max(box.mean[len == 18]), 
    grtr.box = sum(box.mean[len == 18] > box.mean[len == 19]) , 
    diff.bin = bin.mean[len == 19] - max(bin.mean[len == 18]), 
    grtr.bin = sum(bin.mean[len == 18] > bin.mean[len == 19]) , 
    prop = mean(prop), 
    m.time = mean(m.time), 
    m2.time = mean(m2.time), 
    n=mean(n), 
    correct=mean(correct))

prop.dist$special <- ifelse(prop.dist$pic_name == "plot_turk1_100_8_12_2.png", 1, 0)

### Faceting
dbn <- glm(cbind(correct,n-correct)~poly(diff.bin,2), data=prop.dist, family=binomial())

dbx <- glm(cbind(correct,n-correct)~poly(diff.box,2), data=prop.dist, family=binomial())

dpred1 <- data.frame(diff.bin=seq(-14,21, by=0.5))
dpred2 <- data.frame(diff.box=seq(-6,16, length=81))
dpred1$pred <- predict(dbn, type="response", newdata=dpred1)
dpred2$pred <- predict(dbx, type="response", newdata=dpred2)
names(dpred1)[1] <- "difference"
dpred1$variable <- "Binned Distance"
names(dpred2)[1] <- "difference"
dpred2$variable <- "Boxplot Based Distance"

dpred <- rbind(dpred1, dpred2)

prop.diff <- subset(prop.dist, select = c(pic_name, diff.box, diff.bin, prop, m.time, m2.time, special))
prop.diff <- data.frame(prop.diff)
prop.diff.m <- melt(prop.diff, id = c("pic_name", "prop", "special", "m.time", "m2.time"))

levels(prop.diff.m$variable) <- c("Boxplot Based Distance", "Binned Distance")

ggplot(data = prop.diff.m) + 
  geom_vline(xintercept = 0, col = "grey50") + 
  geom_line(aes(x=difference, y=pred, group=variable), data=dpred, 
            colour="steelblue", size=1) +
  geom_point(aes(x=value, y=prop, shape = factor(special)), 
             size = 3, alpha=0.8) + 
#  ylim(c(0, 1)) + 
  xlab(expression(paste(delta,"-Difference", sep="")))+ 
  ylab("Detection Rate") + 
  geom_smooth(aes(x=value, y=prop), se = FALSE, method="loess", 
              linetype=2, colour="steelblue") + 
  facet_wrap( ~ variable, scales = "free_x") + 
  theme(legend.position = "none") 
@
\end{subfigure}
\begin{subfigure}[t]{\textwidth}
\centering
\caption{\label{fig:turk1comp-2}Scatterplots of detection rate versus $\gamma$-number of extreme nulls}
<<gamma-turk1, echo=FALSE, dependson='dist-box-bin',fig.width=8.5, fig.height=4.5, out.width='0.7\\textwidth', warning=FALSE>>=
grtr.diff <- subset(prop.dist, select = c(pic_name, grtr.box, grtr.bin, prop, special))
grtr.diff <- data.frame(grtr.diff)
grtr.diff.m <- melt(grtr.diff, id = c("pic_name", "prop", "special"))

levels(grtr.diff.m$variable) <- c("Boxplot Based Distance", "Binned Distance")

ggplot(data = grtr.diff.m) + 
#  geom_boxplot(aes(x=0, y=prop), data=subset(grtr.diff.m, value==0)) + 
  geom_point(aes(x=value, y=prop, shape = factor(special)), 
             size = 3, alpha=0.8) + 
  ylim(c(0, 1)) + 
  xlab(expression(paste(gamma,"-Number of Extreme Nulls", sep="")))+ 
  ylab("Detection Rate") + 
#  geom_smooth(aes(x=value, y=prop), se = FALSE, method="loess") + 
  facet_wrap( ~ variable, scales = "free_x") + 
  theme(legend.position = "none") 
@
\end{subfigure}
	\vspace{-.1in}
\caption{Comparison of distance metrics for side-by-side boxplots. Detection Rate (a) and the number of plots greater than the observed (b) are plotted against the difference based on the boxplot and binned distance. The vertical line represents the difference equal to zero when there is at least one null plot similar to the observed plot. The detection rate increases with the difference. As the number of plots with distance greater than the observed increases, the detection rate decreases.  The triangle represents a lineup which has a high detection rate but a negative $\delta$-difference. This particular lineup is examined in Figure~\ref{turk1-exp}. }
\label{turk1comp}
\end{figure}

These values are plotted in Figure~\ref{turk1comp}.
We see that as $\delta$-difference increases, detection rate generally increases. The solid lines in Figure~\ref{fig:turkcomp-1} are fits  from  logistic regression models using a quadratic effect for distance.
The fitted lines come very close to the non-parametric smooth shown by the dashed line. Qualitatively, both boxplot based distance and binned distance show very similar fits for detection rate. Based on the logistic regressions, boxplot distance is fitting detection rate a bit better (AIC: \Sexpr{round(AIC(dbx),1)}) than binned distance  (AIC: \Sexpr{round(AIC(dbn),1)}). 

Figure~\ref{fig:turk1comp-2} shows the relationship between detection rate and the $\gamma$-number of extreme null plots. As this number increases, it gets harder for subjects to identify the data plot. It is interesting to see that for some lineups subjects are able to  pick the data plot even if there are  one or two more extreme null plots. 

Though  distance based on  boxplots works better a bit,  binned distance does a decent job in this case. According to the binned distance, there are a few lineups, in which  the data plot is identified in more than 60\% of all evaluations despite a negative $\delta$-difference (see also Figure~\ref{turk1comp}). It should be noted that the binned distance does not take any graphical elements of the plot (such as the box or whiskers) into account but calculates distance solely based on the data. So outliers may have an effect on the binned distance but might not affect the distance based on the boxplots. 

If participants base their choice on graphical elements, binned distance might therefore not be able to adequately reflect this.
In order to investigate on what participants base their choice, we are going to have a closer look at an individual lineup. 

From Figure~\ref{turk1comp} we see that for some of the lineups the detection rate is higher than its $\delta$-difference would suggest. One such lineup is marked using a triangle in Figure~\ref{turk1comp}. 
Figure~\ref{turk1-exp} shows the lineup and the distribution of distance metrics for a closer look at what might observers lead to pick the data plot as different. The grey numbers at the bottom right of each of the plots in the lineup shows a summary of how often a plot was picked by a participant in 168 evaluations.

\begin{figure}[!p]
\centering
\begin{subfigure}[t]{\textwidth}
\centering
\caption{\label{fig:turk1-exp-1}Lineup of side-by-side boxplots. }
<<lp-exc, echo=FALSE, fig.width=6, fig.height=6, out.width='0.6\\textwidth'>>=
dat <- read.table("data/turk1/dat_turk1_100_8_12_2.txt", header = T)  ## plot_turk1_100_8_12_2

### The detection rate for the above lineup is 0.28. But the difference for both binned distance and regression based distance are large negative.

### Melting the data
dat.m <- melt(dat, id = c("age", "grp", "weight"))

### Changing the categorical variable to a numerical variable
dat.m$x <- as.numeric(dat.m$grp) 

### Breaking the variable name to get the position and type of plot (null or obs)
dat.m$plot <- substring(dat.m$variable, 1, 3)
dat.m$position <- substring(dat.m$variable, 4, 5)

### Finding the observed data
obs <- dat.m[dat.m$plot == "obs", c("x", "value") ]
dat.m <- dat.m[, c("x", "value", "position")]
names(dat.m) <- c("group", "val", ".sample")
lineup.dat <- dat.m
lineup.dat$group <- as.factor(lineup.dat$group)
lineup.dat$.sample <- as.numeric(as.character(lineup.dat$.sample))
obs.dat <- subset(lineup.dat, .sample == 20)
levels(lineup.dat$group) <- c("A", "B")

### Number of picks by observers
res.exp1 <- read.csv("data/raw_data_turk1.csv")
lpsub <- subset(res.exp1, pic_name=="plot_turk1_100_8_12_2.png")[,c("response", "response_no")]
dt <- as.data.frame(xtabs(~response_no, data=lpsub))
names(dt) <- c(".sample", "picks")
picks <- data.frame(.sample=1:20)
picks <- merge(picks, dt, by=".sample", all.x=TRUE)
picks$picks[is.na(picks$picks)] <- 0

### lineup
ggplot(data = lineup.dat, aes(x=group, y=val, col = group)) +
         geom_boxplot() +  
      ylab("") + xlab("Group") + 
        facet_wrap(~ .sample, ncol=5) + 
  scale_color_discrete(name = "Group") + 
  theme(legend.position = "none") + 
  theme(axis.text.y = element_blank(), 
        axis.title = element_blank(),
        axis.ticks.y = element_blank(),
        plot.margin=unit(c(0,0,0,0), unit="cm")) + 
  geom_text(aes(label=picks), x=2.6, y=-30, colour="grey70", size=8, hjust=1,
            data=picks)
@
\end{subfigure}\hfill

<<lp-exc-distr, dependson='lp-exc', echo=FALSE, results='hide', cache=TRUE>>=
dframe <- data.frame(t(replicate(1000, {
	samp.dat <- data.frame(group = obs.dat$group, 
	                       val = rnorm(nrow(obs.dat), 0, 12))
  dat1 <- data.frame(t(replicate(18, {
    null.dat <- data.frame(group = obs.dat$group, 
                           val = rnorm(nrow(obs.dat), 0, 12))
    b1 = bin_dist(X=samp.dat, PX=null.dat, lineup.dat = lineup.dat, 
                  X.bin = 2, Y.bin = 2)
 		b2 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, 
 		              X.bin = 2, Y.bin = 8)
 		s = box_dist(samp.dat, null.dat)
 		c(dbn22 = b1, dbn28 = b2, dbx = s)
  })))
  
	colSums(dat1)/18
})))
 
@

<<lp-dists, dependson='lp-exc', dependson='lp-exc', echo=FALSE, results='hide'>>=
metrics.dat <- expand.grid(pos.1 = 1:20, pos.2 = 1:20)

for (i in 1:nrow(metrics.dat)) {
  P <- subset(lineup.dat, .sample == metrics.dat$pos.1[i])[,1:2]
  PX <- subset(lineup.dat, .sample == metrics.dat$pos.2[i])[,1:2]
  
  metrics.dat$b22[i] <- bin_dist(P, PX, lineup.dat, X.bin=2, Y.bin = 2)
  metrics.dat$b28[i] <- bin_dist(P, PX, lineup.dat, X.bin=2, Y.bin = 8)
  metrics.dat$bx[i] <- box_dist(P, PX)
}

pos <- 20
metrics.dat <- subset(metrics.dat, pos.1 != pos.2 & pos.2 != pos)

dd1 <- metrics.dat %>% group_by(pos.1) %>% 
  summarize(
    len = n(),
    b22 = mean(b22), 
    b28 = mean(b28), 
    bx = mean(bx)
    )
@
\begin{subfigure}[t]{0.32\textwidth}
%\includegraphics[width=\textwidth]{distribution-box-dist-exp1.pdf}
\caption{\small Boxplot based distance}
<<dbx, dependson='lp-dist', echo=FALSE, fig.width=5, fig.height=5, out.width='\\textwidth'>>=
ybx <- max(density(dframe$dbx)$y)
ggplot()  + geom_density(data = dframe, aes(x = dbx), 
                         fill = "grey80", col = "grey80" ) + 
  geom_segment(data = subset(dd1, len == 19), 
               aes(x= bx, xend = bx, 
                   y=0.02*ybx, 
                   yend = 0.2*ybx), 
               colour="darkorange", size=1)  + 
  geom_segment(data = subset(dd1, len != 19), 
               aes(x = bx, xend = bx, 
                   y = rep(0.02*ybx,19), 
                   yend = rep(0.1*ybx,19)), 
               size=1, alpha = I(0.7)) + xlab("Boxplot Based Distance") + 
  ylab("") + 
  geom_text(data = subset(dd1, len != 19), y = - 0.03*ybx, 
                       size = 2.5, aes(x = bx, label = pos.1)) + 
  geom_text(data = subset(dd1, len == 19), y = 0.23*ybx, 
                       size = 3, aes(x = bx, label = pos.1),
            colour="darkorange") + 
  ylim(c(- 0.04*ybx, ybx + 0.1*ybx))
@
\end{subfigure}
\begin{subfigure}[t]{0.32\textwidth}
\caption{\small Binned (2,8) distance}
<<b28, dependson='lp-dist', echo=FALSE, fig.width=5, fig.height=5, out.width='\\textwidth'>>=
yb28 <- max(density(dframe$dbn28)$y)
ggplot()  + geom_density(data = dframe, aes(x = dbn28), 
                         fill = "grey80", col = "grey80" ) + 
  geom_segment(data = subset(dd1, len == 19), 
               aes(x= b28, xend = b28, 
                   y=0.02*yb28, 
                   yend = 0.2*yb28), 
               colour="darkorange", size=1)  + 
  geom_segment(data = subset(dd1, len != 19), 
               aes(x = b28, xend = b28, 
                   y = rep(0.02*yb28,19), 
                   yend = rep(0.1*yb28,19)), 
               size=1, alpha = I(0.7)) + xlab("Binned Distance (p = 2, q = 8)") + 
  ylab("") + 
  geom_text(data = subset(dd1, len != 19), y = - 0.03*yb28, 
                       size = 2.5, aes(x = b28, label = pos.1)) + 
  geom_text(data = subset(dd1, len == 19), y = 0.23*yb28, 
                       size = 3, aes(x = b28, label = pos.1),
            colour="darkorange") + 
    ylim(c(- 0.04*yb28, 
         yb28 + 0.1*yb28))
@
\end{subfigure}
\begin{subfigure}[t]{0.32\textwidth}
\caption{\small Binned (2,2) distance}
<<b22, dependson='lp-dist', echo=FALSE, fig.width=5, fig.height=5, out.width='\\textwidth'>>=
yb22 <- max(density(dframe$dbn22)$y)
ggplot()  + geom_density(data = dframe, aes(x = dbn22), 
                         fill = "grey80", col = "grey80" ) + 
  geom_segment(data = subset(dd1, len == 19), 
               aes(x= b22, xend = b22, 
                   y=0.02*yb22, 
                   yend = 0.2*yb22), 
               colour="darkorange", size=1)  + 
  geom_segment(data = subset(dd1, len != 19), 
               aes(x = b22, xend = b22, 
                   y = rep(0.02*yb22,19), 
                   yend = rep(0.1*yb22,19)), 
               size=1, alpha = I(0.7)) + xlab("Binned Distance (p = q = 2)") + 
  ylab("") + 
  geom_text(data = subset(dd1, len != 19), y = - 0.03*yb22, 
                       size = 2.5, aes(x = b22, label = pos.1)) + 
  geom_text(data = subset(dd1, len == 19), y = 0.23*yb22, 
                       size = 3, aes(x = b22, label = pos.1),
            colour="darkorange") + 
  ylim(c(- 0.04*yb22, 
         yb22 + 0.1*yb22))
@
\end{subfigure}

	\vspace{-.1in}
\caption{Illustration of the behavior of the three distance metrics. The lineup is shown in (a) and  distributions of the different  metrics based on this lineup is shown in the other plots: boxplot based distance in (b), binned distance with 2 and 8 bins on x and y axis in (c) and binned distance with 2 bins along both axes in (d). Grey numbers on the lineup show the counts of subject choices. The lineup corresponds to the point marked with a triangle in difference vs. detection rate plot in Figure~\ref{turk1comp}. }
\label{turk1-exp}
%{Caption of subfigures \subref{fig:subfig1}, \subref{fig:subfig2} and \subref{fig:subfig3}}
\end{figure}
%\afterpage{\clearpage}

%The lineup in Figure~\ref{turk1-exp} is a lineup of side-by-side boxplots.
The observed data plot is Plot \#20, which has been picked most often by participants, but there are other plots that are being chosen quite frequently. Plot \#16 is the plot with the  largest boxplot distance. This is reflected by the large number of times this plot has been singled out by observers. 

Maybe surprisingly, plots Plots \#19 and \#15, which have relatively large differences between the quartiles, are not being chosen by many participants. Instead, observers seem to focus on the difference in interquartile ranges (i.e.\ the height of the box in a  boxplot). Plots \#1, \#13 and \#16 exhibit a large interquartile difference and are being picked often by observers.


The time subjects  take to respond to a lineup is another measure that can be used to evaluate their difficulty. 
Due to the presence of some huge outliers, we decided to use the median of time taken for each lineup. These values are plotted against  $\delta$-difference for both distance measures as shown in Figure~\ref{turk1-mtime}.
Both $\delta$-difference exhibit a similar pattern: the time to respond peaks at a $\delta$-difference of zero. This indicates, that the situation where two or more plots exhibits similarly extreme features is the most difficult for observers to judge. With negative $\delta$-differences at least one null plot is more extreme, and observers seem to be able to make their choice quickly (probably for the extreme null plot).
When $\delta$-difference is positive, the median time to respond decreases rapidly as $\delta$-difference increases. Hence, subjects are able to make their choice of a plot more quickly if the true plot is extreme compared to the null plots.

Note that taking the log of time to respond is an alternative to using the median. Qualitatively, the relationships to distance metrics are very similar for median and log time taken, but median time is much easier to interpret. 

\begin{figure}[!h]
\centering
<<time-taken, dependson='dist-box-bin', fig.width=8.5, fig.height=4.5, out.width='0.6\\textwidth', echo=FALSE>>=
ggplot(data = prop.diff.m) +
  geom_vline(xintercept = 0, col = "grey50") + 
  geom_point(aes(x=value, y=m.time, shape = factor(special)),
             size = 3) +
  xlab(expression(paste(delta,"-Difference", sep=""))) + 
  ylab("Median Time to Respond (in seconds)") + 
  facet_wrap( ~ variable, scales = "free_x") +  ylim(c(0,80)) +
  geom_smooth(aes(x=value, y=m.time), se=FALSE, method="loess") +
  theme(legend.position = "none")
@
	\vspace{-.1in}
\caption{Comparison of distance metrics for side-by-side boxplots. Median time to respond is plotted against $\delta$-difference based on boxplot and binned(2,8) distance. The vertical line represents a $\delta$-difference equal to zero when there is at least one null plot similar to the observed plot. Median time to respond decreases as $\delta$-difference increases. The triangle marks again the lineup examined in detail in Figure~\ref{turk1-exp}. }
\label{turk1-mtime}
\end{figure}

\subsection{Experiment II -- Scatterplots with an Overlaid Regression Line}\label{sec:turk2}
The question of interest of experiment II is very similar to the one in experiment I: again, the focus is to investigate the power of visual methods in the framework of normal models. In contrast to experiment I, we are interested in the significance of a continuous variable $X$. The test statistic therefore is a scatterplot of the dependent variable and $X$ overlaid by a regression line. As mentioned in the introduction and further discussed in section 5.2 of \citet{majumder:2011}, $X$ is assumed to be standard normal, and dependent data $Y$ is also simulated from a normal distribution for various correlation settings. Null data correspondingly is simulated from $N(X\widehat{\beta}, \widehat{\sigma}^2)$.  
Figures~\ref{lineup-example} and~\ref{fig:distances} show examples of the type of  lineup used in the study.  Subjects recruited from MTurk  were shown a set of ten lineups  and asked to identify the plot with the steepest slope in each. 

For each lineup in this experiment,  distances between the plots were computed using both  regression based distance  ($d_{RG}$) and  binned distances ($d_{BN}$) with a small number of bins. For each lineup the proportion of data identifications was calculated from participants' responses and plotted against $\delta$-difference and the $\gamma$-number of extreme null plots, as shown in Figure~\ref{turk2comp}.

\begin{figure}[!t]
\begin{subfigure}[t]{\textwidth}
\centering
\caption{\label{turk2comp-1}$\delta$-difference }
<<delta-turk2, echo=FALSE, fig.width=8.5, fig.height=4.5, out.width='0.7\\textwidth', warning=FALSE>>=
res.exp2 <- read.csv("data/raw_data_turk2.csv")
res.exp2 <- subset(res.exp2, select = c(pic_name, response, plot_location, time_taken))

res.dat <- res.exp2 %>% group_by(pic_name) %>%
  summarize(
    prop = sum(response)/length(response), 
    pos = mean(plot_location), 
    m.time = median(time_taken),
    n = n(),
    correct = sum(response)
  )

metrics <- read.table("data/turk2-metrics.txt", header=TRUE)
metrics.sub <- subset(metrics, pos.1 != pos.2)
dat.merge <- merge(metrics.sub, res.dat, by = "pic_name")
dat.merge <- subset(dat.merge, pos.2 != pos)
dd <- dat.merge %>% group_by(pic_name, pos.1) %>%
  summarize(
    reg.mean = mean(reg.bin), 
    bin.mean = mean(bin.dist), 
    len = length(reg.bin), 
    prop = mean(prop), 
    m.time = mean(m.time),
    n=mean(n),
    correct=mean(correct))

prop.dist <- dd %>% group_by(pic_name) %>%
  summarize(
    diff.reg = reg.mean[len == 19] - max(reg.mean[len == 18]), 
    grtr.reg = sum(reg.mean[len == 18] > reg.mean[len == 19]), 
    diff.bin = bin.mean[len == 19] - max(bin.mean[len == 18]), 
    grtr.bin = sum(bin.mean[len == 18] > bin.mean[len == 19]), 
    prop = mean(prop), 
    m.time = mean(m.time),
    n=mean(n),
    correct=mean(correct))
prop.dist$special <- ifelse(prop.dist$pic_name == "plot_turk2_100_350_12_3.png", 1, 0)

t2dbn <- glm(cbind(correct, n-correct)~poly(diff.bin,2), data=prop.dist, family=binomial())
t2drg <- glm(cbind(correct, n-correct)~poly(diff.reg,2), data=prop.dist, family=binomial())

predrg <- data.frame(diff.reg=seq(-0.1,0.2, by=.01))
predrg$pred <- predict(t2drg, newdata=predrg, type="response")
names(predrg)[1] <- "value"
predrg$variable <- "Regression Based Distance"
predbn <- data.frame(diff.bin=seq(-23,13, by=0.5))
predbn$pred <- predict(t2dbn, newdata=predbn, type="response")
names(predbn)[1] <- "value"
predbn$variable <- "Binned Distance"

t2pred <- rbind(predbn, predrg)
### Facetted Plots

prop.diff <- subset(prop.dist, select = c(pic_name, diff.reg, diff.bin, prop, m.time, special))
prop.diff <- data.frame(prop.diff)
prop.diff.m <- melt(prop.diff, id = c("pic_name", "prop", "special", "m.time"))

levels(prop.diff.m$variable) <- c("Regression Based Distance", "Binned Distance")

ggplot(data=prop.diff.m) +
  geom_vline(xintercept = 0, col = "grey50") + 
  geom_point(aes(x=value, y=prop, shape=factor(special)), size=3) +
  xlab(expression(paste(delta,"-Difference", sep=""))) +
  ylab("Detection Rate") + 
  scale_y_continuous(breaks=(0:4)/4) + 
  facet_wrap( ~ variable, scales = "free_x") + 
  geom_smooth(aes(x=value, y=prop, group=variable), se = FALSE, method='loess',
              linetype=2, colour="steelblue") + 
  theme(legend.position = "none") + 
  geom_line(aes(value, pred, group=variable), colour="steelblue", size=1, 
            data=t2pred) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))

@
\end{subfigure}
\begin{subfigure}[t]{\textwidth}
\centering
\caption{\label{turk2comp-2}$\gamma$-number of extreme nulls }
<<gamma-turk2, dependson='delta-turk2', echo=FALSE, fig.width=8.5, fig.height=4.5, out.width='0.7\\textwidth'>>=

grtr.diff <- subset(prop.dist, select = c(pic_name, grtr.reg, grtr.bin, prop, special))
grtr.diff <- data.frame(grtr.diff)
grtr.diff.m <- melt(grtr.diff, id = c("pic_name", "prop", "special"))

levels(grtr.diff.m$variable) <- c("Regression Based Distance", "Binned Distance")


qplot(value, prop, data = grtr.diff.m, geom = "point", size = I(3), ylim = c(0, 1), ylab = "Detection Rate", shape = factor(special)) + 
  facet_wrap( ~ variable, scales = "free_x") + 
#  geom_vline(xintercept = 0, col = "grey50") + 
  theme(legend.position = "none") +
#  geom_smooth(se=FALSE, method='loess') +
  xlab(expression(paste(gamma,"-Number of extreme null plots", sep=""))) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))

@
\end{subfigure}
	\vspace{-.1in}
\caption{Comparison of distance metrics for scatterplots with a regression line overlaid.  Detection rate is plotted against (a) $\delta$-difference  and (b) $\gamma$-number of extreme null plots  based on  regression and binned distances. The vertical line represents the difference equal to zero when there is at least one null plot with an identical difference measure to the data plot. 
Detection rate increases  on average with $\delta$-difference. As the $\gamma$-number of extreme null plots increases,  detection rate decreases.  The triangle represents a lineup which has high detection rate but negative difference. This particular lineup is examined in Figure~\ref{turk2-exp}.}
\label{turk2comp}
\end{figure}

 As $\delta$-difference increases,  average detection rate increases, i.e.\ subjects do better in  easier lineups than hard ones. The solid lines show fits of logistic regressions of detection rate in $\delta$-difference based on regression (AIC: \Sexpr{round(AIC(t2drg),1)}) and based on binned distance (AIC: \Sexpr{round(AIC(t2dbn),1)}). Both fits come reasonably close to the dashed lines of a non-parametric loess smooth, indicating that they explain most of the relationship between $\delta$-difference and detection rate.
The regression based distance works well in capturing the complexity of the lineups. 
A few lineups have a $\delta$-difference close to zero, marked by the vertical line -- for those lineups detection rates of lineups flip from being close to zero to close to one within a very short interval. 

For binned distance the situation is quite different.  Although detection rate increases with difference, the detection rate is already quite high for lineups with negative differences. This is a classic scenario where the distance does not capture all the features on which observers base their choice: here, a graphical element --the line-- affects the response, and shifts detection rates horizontally. 
While this makes an absolute comparison of distances across different types of plots impossible, we can still use binned distance as a relative measure to judge difficulty.


Figure~\ref{turk2comp-2} shows  detection rate against the $\gamma$-number of extreme null plots. As the number of extreme plots increases,  detection rate decreases on average --- indicating that identifying the data plot from a lineup becomes harder when there are more extreme plots in the lineup. For a few lineups, almost all evaluations led to an identification of the data plot although there was one null plot with an extreme feature. From Figure~\ref{turk2comp-1}, we see that this difference is marginal in most cases, though. 

\begin{figure}[!t]
\centering
<<turk2-time, dependson='delta-turk2', echo=FALSE, fig.width=8.5, fig.height=4.5, out.width='0.75\\textwidth'>>=
ggplot(data = prop.diff.m) + 
  geom_point(aes(value, m.time,  shape = factor(special)), size=3) +
  ylab("Median Time to Respond (in seconds)") +
  xlab(expression(paste(delta,"-Difference", sep=""))) +
  facet_wrap( ~ variable, scales = "free_x") + 
  geom_vline(xintercept = 0, col = "grey50") +  ylim(c(0,42.5)) +
  geom_smooth(aes(value, m.time, group=variable), se=FALSE, method='loess') + 
  theme(legend.position = "none", plot.margin=unit(c(0,0,0,0), unit="line"))

@
	\vspace{-.1in}
\caption{Comparison of distance metrics for scatterplots with a regression line over laid. Median time to respond is plotted against $\delta$-difference based on  regression based and binned(2,2) distance. The vertical line represents a $\delta$-difference equal to zero, i.e.\ there is at least one null plot similar to the observed plot. The median time to response decreases as $\delta$-difference increases. The triangle represents a lineup which is examined in Figure~\ref{turk2-exp}.   }

\label{turk2-mtime}
\end{figure}

Figure~\ref{turk2-mtime} shows the relationship between the median time taken to respond and $\delta$-difference for both the distances. It can be clearly seen that there is a strong negative association: as $\delta$-difference increases, the subjects take less time to respond. Similar to the previous example of section~\ref{sec:turk1} time to respond peaks at a $\delta$-difference close to zero.

Although the regression based distance seems to efficiently identify the quality of the lineup, there is one lineup (marked by a solid triangle in Figure~\ref{turk2comp}) with a negative $\delta$-difference which was nevertheless identified by observers reasonably successfully.  Figure~\ref{turk2-exp} shows the lineup and the corresponding distributions of distance metrics. 

<<lp-turk2-exc, echo=FALSE, results='hide'>>=
dat <- read.table("data/turk2/dat_turk2_100_350_12_3.txt", header = TRUE) #
dat.m <- melt(dat, id = "X")
dat.m$.sample <- substring(dat.m$variable, 2)
lineup.dat <- data.frame(x = dat.m$X, z = dat.m$value, .sample = dat.m$.sample)

lineup.dat$.sample <- as.numeric(as.character(lineup.dat$.sample))
@

<<lp-exc-turk2-distr, dependson='lp-exc-turk2',echo=FALSE, cache=TRUE, results='hide'>>=
## From the lineup data
obs.dat <- lineup.dat[lineup.dat$.sample == 10, ]   
mean.null <- mean(obs.dat$z)
sd.null <- 12 #  sd(obs.dat$z)

###=============================================================================
### generation of distribution of distance metric
###=============================================================================

### using bin_dist with x.bin = 2, y.bin = 2

dframe <- data.frame(t(replicate(1000, {
	zz <- rnorm(nrow(obs.dat), mean=mean.null, sd=sd.null)
	samp.dat <- data.frame(group = obs.dat$x, z = zz )
	dat1 <- data.frame(t(replicate(18, {
		yy <- rnorm(nrow(obs.dat), mean=mean.null, sd=sd.null)
		null.dat <- data.frame(group = obs.dat$x, z = yy)
		
		b1 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, 
		              X.bin = 2, Y.bin = 2)
 		b2 = bin_dist(samp.dat, null.dat, lineup.dat = lineup.dat, 
 		              X.bin = 8, Y.bin = 2)
 		r.int = reg_dist(samp.dat, null.dat)
 		r.no.int <- reg_dist(samp.dat, null.dat, intercept=FALSE)
 		c(dbn22 = b1, dbn28 = b2, drg = r.int, drgx = r.no.int)
 		})))
	 	
 		colSums(dat1)/18
})))

@


<<lp-exc-turk2-metrics, dependson='lp-exc-turk2', echo=FALSE, cache=TRUE, results='hide'>>=
metrics.dat <- data.frame(expand.grid(pos.1=1:20, pos.2=1:20))

for (i in 1:nrow(metrics.dat)) {
  .X <- subset(lineup.dat, .sample==metrics.dat$pos.1[i])[,1:2]
  .PX <- subset(lineup.dat, .sample==metrics.dat$pos.2[i])[,1:2]
  
  metrics.dat$b22[i] <- bin_dist(.X, .PX, lineup.dat=lineup.dat, X.bin=2, Y.bin=2)
  metrics.dat$b28[i] <- bin_dist(.X, .PX, lineup.dat=lineup.dat, X.bin=8, Y.bin=2)
  metrics.dat$brg[i] <- reg_dist(.X, .PX)
  metrics.dat$brgx[i] <- reg_dist(.X, .PX, intercept=FALSE)
}

pos <- 10
metrics.dat <- subset(metrics.dat, pos.1 != pos.2 & pos.2 != pos)

dd3 <- metrics.dat %>% group_by(pos.1) %>% summarize(
  b22 = mean(b22), 
  b28 = mean(b28), 
  brg = mean(brg),
  brgx = mean(brgx),
  len=n())
@

\begin{figure}[!p]
\centering
\begin{subfigure}[b]{\textwidth}
\caption{\small Lineup of scatterplots with overlaid regression lines.}
\centering
\begin{subfigure}[b]{0.6\textwidth}
<<lp-turk2-exc-lp, dependson='lp-turk2-exc', echo=FALSE, fig.width=5.5, fig.height=5.5, out.width='\\textwidth'>>=

### Number of picks by observers
res.exp2 <- read.csv("data/raw_data_turk2.csv")
lpsub <- subset(res.exp2, pic_name=="plot_turk2_100_350_12_3.png")[,c("response", "response_no")]
dt <- as.data.frame(xtabs(~response_no, data=lpsub))
names(dt) <- c(".sample", "picks")
picks <- data.frame(.sample=1:20)
picks <- merge(picks, dt, by=".sample", all.x=TRUE)
picks$picks[is.na(picks$picks)] <- 0

ggplot(data = lineup.dat, aes(x=x, y=z)) +
  geom_point(alpha = 0.15, size=2) +
  xlab("X1") + ylab("X2") +
  geom_smooth(method = "lm", se = FALSE, size = 1) + 
  facet_wrap(~ .sample) + theme_lineup +
  geom_text(aes(label=picks), x=2.1, y=-30, colour="grey70", size=8, hjust=1,
            data=picks)

@
\end{subfigure}
\begin{subfigure}[b]{0.3\textwidth}
\caption{Regression based distance}
%\vspace{-.1in}
<<fig.height = 4, fig.width = 4.5, echo=FALSE, out.width='\\textwidth'>>=
yreg <- max(density(dframe$drg)$y)
ggplot()  + 
  geom_density(data = dframe, aes(x = drg), fill = "grey80", col = "grey80") +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = brg, xend = brg, y = rep(0.02*yreg,19), 
                   yend = rep(0.1*yreg,19)), 
               size=1, alpha = I(0.7)) +
  geom_segment(data = subset(dd3, len == 19), 
               aes(x= brg, xend = brg, y=0.02*yreg, yend = 0.2*yreg), 
               colour="darkorange", size=1) +
  xlab("Regression Distance") + ylab("") + 
  geom_text(data = subset(dd3, len != 19), size = 2.5, 
            aes(x = brg, label = pos.1, y = - 0.03*yreg)) + 
  geom_text(data = subset(dd3, len ==19), y = 0.23*yreg, size = 3, 
            aes(x = brg, label = pos.1), colour="darkorange") + 
  ylim(c(- 0.04*yreg, yreg + 0.1*yreg)) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))
@
\end{subfigure}
\end{subfigure}

%\vspace{-.3in}
\begin{subfigure}[t]{0.3\textwidth}
\caption{Binned (2,2) distance}
%\vspace{-.1in}
<<fig.height = 4, fig.width = 4.5, echo=FALSE, out.width='\\textwidth'>>=
yb22 <- max(density(dframe$dbn22)$y)
ggplot()  + 
  geom_density(data = dframe, aes(x = dbn22), fill = "grey80", col = "grey80") +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = b22, xend = b22, y = rep(0.02*yb22,19), 
                   yend = rep(0.1*yb22,19)), 
               size=1, alpha = I(0.7)) +
  geom_segment(data = subset(dd3, len == 19), 
               aes(x= b22, xend = b22, y=0.02*yb22, yend = 0.2*yb22), 
               colour="darkorange", size=1) +
  xlab("Binned Distance (p = q = 2)") + ylab("") + 
  geom_text(data = subset(dd3, len != 19), y = - 0.03*yb22, size = 2.5, 
            aes(x = b22, label = pos.1)) + 
  geom_text(data = subset(dd3, len ==19), y = 0.23*yb22, size = 3, 
            aes(x = b22, label = pos.1), colour="darkorange") + 
  ylim(c(- 0.04*yb22, yb22 + 0.1*yb22)) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))
@
\end{subfigure}
\begin{subfigure}[t]{0.3\textwidth}
\caption{Binned (8,2) distance}
%\vspace{-.1in}
<<fig.height = 4, fig.width = 4.5, echo=FALSE, out.width='\\textwidth'>>=
yb28 <- max(density(dframe$dbn28)$y)
ggplot()  + 
  geom_density(data = dframe, aes(x = dbn28), fill = "grey80", col = "grey80") +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = b28, xend = b28, y = rep(0.02*yb28,19), 
                   yend = rep(0.1*yb28,19)), 
               size=1, alpha = I(0.7)) +
  geom_segment(data = subset(dd3, len == 19), 
               aes(x= b28, xend = b28, y=0.02*yb28, yend = 0.2*yb28), 
               colour="darkorange", size=1) +
  xlab("Binned Distance (p = 8, q = 2)") + ylab("") + 
  geom_text(data = subset(dd3, len != 19), y = - 0.03*yb28, size = 2.5, 
            aes(x = b28, label = pos.1)) + 
  geom_text(data = subset(dd3, len ==19), y = 0.23*yb28, size = 3, 
            aes(x = b28, label = pos.1), colour="darkorange") + 
  ylim(c(- 0.04*yb28, yb28 + 0.1*yb28)) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))
@
\end{subfigure}
\begin{subfigure}[t]{0.3\textwidth}
\caption{$p$-values}
%\vspace{-.1in}
<<fig.height = 4, fig.width = 4.5, echo=FALSE, out.width='\\textwidth'>>=
pval_dist <- function(X) {
  as.numeric(summary(lm(z~x, data=X))$coefficients[2,4])
}

pval <- lineup.dat %>% group_by(.sample) %>% do(data.frame(
  pval=pval_dist(X=.)))
pval$true <- pval$.sample == 10
m <- 20


ggplot() + 
  geom_rect(aes(xmin=0, xmax=1, ymin=0, ymax=1), fill = "grey80", 
            colour = "grey80", alpha=0.8) + 
  xlab("p-value") + ylim(c(-0.03,1)) + xlim(c(0,1)) +
  geom_segment(aes(x=pval, xend=pval), y=0.03, yend=0.1, 
               data=subset(pval, !true)) + 
  geom_segment(aes(x=pval, xend=pval), y=0.03, yend=0.2, 
               data=subset(pval, true), colour="darkorange") +
  geom_text(aes(x=pval, label=.sample), y=-0.03, size=2.5,
            data=subset(pval, !true)) +
  geom_text(aes(x=pval, label=.sample), y=0.23, size=3, colour="darkorange",
            data=subset(pval, true)) +
  theme(plot.margin=unit(c(0,0,0,0), unit="line"))
  
@
\end{subfigure}

\caption{Illustration of the behavior of different distance metrics. The lineup is shown in (a) and the distributions of different distance metrics using this lineup are shown in plots (b)--(d): regression based distances in (b), binned distance with 2 bins on each axes in (c), and binned distance with 8 and 2 bins in x and y axis (d). In (e), the distribution of the conventional $p$-values are plotted with $p$-values for the lineups marked on the distribution. Grey numbers on the lineup show the counts of subject choices. The lineup corresponds to the point marked with a triangle in difference vs. detection rate plot in Figure~\ref{turk2comp}.}
\label{turk2-exp}
\end{figure}

The lineup in Figure~\ref{turk2-exp} is a difficult one as suggested by the distribution of the distance metrics based on regression. 
For the data plot (in panel \#10) the conventional $p$-value for testing the slope equal to zero is 0.085. However, the signal in the plot is strong enough, to make  around 28\% of all subjects pick this plot.

The binned distance with 2 bins on each axes does not let the data plot stand out in any way, however, the binned distance using the optimal number of bins (8 on the x-axis and 2 on the y-axis) by the optimal number of bins selection method identifies the data plot as different from the others. 

The number of picks lines up best with the difference measure based on the slope (regression without intercept). Plots \#10, 12, 11, 9, and 7 all have a relatively steep slope, and are also the plots that were picked the most often.  
Again, a distance measure derived directly from one of the graphical elements in the plot leads to the best assessment of the choices made by human evaluators.


\subsection{Experiment III -- Large $p$, Small $n$ Data}

The motivation behind this experiment is to study the effect of high dimensions on separability in data. Scenarios with pure noise and some real separation in two or three groups were investigated. 
A projection pursuit with Penalized Discriminant Analysis Index \citep{lee:2009} was used to obtain one (for two groups) or two (for three groups) dimensional projections. 
Depending on the number of groups, either a jittered dotplot or a scatterplot was used as test statistic in a lineup setting. 
The null plots are obtained by permuting the group variable and plotting the two dimensional projections obtained from a projection pursuit with PDA index.
The subjects were shown these lineups and were asked to identify the plot with the most separated colored groups. 


The distances between the plots in this experiment were computed using the distance based on minimum separation and average separation of the clusters and also the binned distance. The number of bins used for the lineups with one dimensional projections is larger (10 in this case) but for the lineups with two dimensional projections, the number of bins used is 5. The proportion of correct response is plotted against $\delta$-difference and $\gamma$-number of extreme nulls for both distances. Figure~\ref{lp-comp} shows the results.

<<t7-distances, echo=FALSE, cache=TRUE,  results='hide', cache=TRUE>>=
files.txt <- dir("data/turk7","*.txt")
files.png <- gsub("txt", "png", gsub("dat", "plot", files.txt))

metrics <- NULL
for (k in 1:length(files.txt)){
	dat <- read.table(sprintf("data/turk7/%s",files.txt[k], sep = ""), header = T)
  metrics.dat <- data.frame(expand.grid(pos.1=1:20, pos.2=1:20))

  if(ncol(dat) == 4) {
  	lineup.dat <- data.frame(x = dat$x, z = dat$cl, cl = dat$cl, 
  	                         .sample = dat$.sample)
	  for (i in 1:nrow(metrics.dat)) {
	    .X <- subset(lineup.dat, .sample==metrics.dat$pos.1[i])[,1:3]
	    .PX <- subset(lineup.dat, .sample==metrics.dat$pos.2[i])[,1:3]
	    metrics.dat$dbn[i] <- bin_dist(.X, .PX, lineup.dat, X.bin=10, Y.bin=10)
	    metrics.dat$dms[i] <- sep_dist(.X, .PX, clustering = TRUE, nclust = 2)
	    metrics.dat$das[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 2, type="average.toother")
	    metrics.dat$dmin[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 2, type="min.separation")
	    metrics.dat$ddunn[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 2, type="dunn")
  	  metrics.dat$pic_name[i] <- files.png[k]
	   }
	}
	if(ncol(dat) == 6) {
	  lineup.dat <- data.frame(x = dat$X1, z = dat$X2, cl = dat$cl, 
	                           .sample = dat$.sample)
	  for (i in 1:nrow(metrics.dat)) {
	    .X <- subset(lineup.dat, .sample==metrics.dat$pos.1[i])[,1:3]
	    .PX <- subset(lineup.dat, .sample==metrics.dat$pos.2[i])[,1:3]

	    metrics.dat$dbn[i] <- bin_dist(.X, .PX, lineup.dat, X.bin=5, Y.bin=5)
	    metrics.dat$dms[i] <- sep_dist(.X, .PX, clustering = TRUE, nclust = 3)
	    metrics.dat$das[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 3, type="average.toother")
	    metrics.dat$dmin[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 3, type="min.separation")
	    metrics.dat$ddunn[i] <- sep_dist(.X, .PX, clustering = TRUE, 
	                                   nclust = 3, type="dunn")
	    metrics.dat$pic_name[i] <- files.png[k]
	  }
	}
	metrics <- rbind(metrics, metrics.dat)
}

@

<<t7-distr, dependson='t7-distances', echo=FALSE, results='hide'>>=

res.exp.lp <- read.csv("data/raw_data_turk7.csv")

res.exp.lp <- subset(res.exp.lp, pic_name %in% files.png, 
                     select = c(pic_name, response, plot_location, time_taken))

res.dat <- res.exp.lp %>% group_by(pic_name) %>% summarize(
  prop = sum(response)/length(response), 
  pos = mean(plot_location), 
  m.time = mean(time_taken),
  med.time = median(time_taken), 
  correct = sum(response),
  n=n())

metrics.sub <- subset(metrics, pos.1 != pos.2)
dat.merge <- merge(metrics.sub, res.dat, by = "pic_name")
dat.merge <- subset(dat.merge, pos.2 != pos)

dd <- dat.merge %>% group_by(pic_name, pos.1) %>%
  summarize(
    len = length(dbn), 
    dbn = mean(dbn), 
    dms = mean(dms), 
    dmin = mean(dmin), 
    das = mean(das), 
    ddunn = mean(ddunn),
    prop = mean(prop), 
    m.time = mean(m.time),
    med.time = mean(med.time),
    correct = mean(correct),
    n = mean(n))

prop.dist <- dd %>% group_by(pic_name) %>% summarize(
  diff.dbn = dbn[len == 19] - max(dbn[len == 18]), 
  grtr.dbn = sum(dbn[len == 18] > dbn[len == 19]), 
  diff.dms = dms[len == 19] - max(dms[len == 18]), 
  grtr.dms = sum(dms[len == 18] > dms[len == 19]), 
  diff.dmin = dmin[len == 19] - max(dmin[len == 18]), 
  grtr.dmin = sum(dmin[len == 18] > dmin[len == 19]), 
  diff.das = das[len == 19] - max(das[len == 18]), 
  grtr.das = sum(das[len == 18] > das[len == 19]), 
  diff.ddunn = ddunn[len == 19] - max(ddunn[len == 18]), 
  grtr.ddunn = sum(ddunn[len == 18] > ddunn[len == 19]), 
  prop = mean(prop), m.time = mean(m.time), 
  med.time = mean(med.time),
  correct = mean(correct),
  n=mean(n)
)

prop.dist$shape <- ifelse(prop.dist$pic_name == "plot_large_p_small_n_30_100_0_2_3.png", 1, 0)
@


\begin{figure}[!t]
\centering
\begin{subfigure}[t]{\textwidth}
\caption{$\delta$-difference}
\centering
<<largep-delta, echo=FALSE, dependson='t7-distr', out.width='\\textwidth', fig.width=12.5, fig.height=3.5>>=
dbn <- glm(cbind(correct,n-correct)~poly(diff.dbn,2), data=prop.dist, family=binomial())
dms <- glm(cbind(correct,n-correct)~poly(diff.dms,2), data=prop.dist, family=binomial())
dmin <- glm(cbind(correct,n-correct)~poly(diff.dmin,2), data=prop.dist, family=binomial())
das <- glm(cbind(correct,n-correct)~poly(diff.das,2), data=prop.dist, family=binomial())
ddunn <- glm(cbind(correct,n-correct)~poly(diff.ddunn,2), data=prop.dist, family=binomial())

dpred1 <- data.frame(diff.dbn=seq(-8.8, 8.3, by=0.1))
dpred2 <- data.frame(diff.dms=seq(-0.75, 1.25, length=100))
dpred3 <- data.frame(diff.das=seq(-1, 1, length=100))
dpred4 <- data.frame(diff.ddunn=seq(-2.75, 3, length=100))
dpred1$pred <- predict(dbn, type="response", newdata=dpred1)
dpred2$pred <- predict(dms, type="response", newdata=dpred2)
dpred3$pred <- predict(das, type="response", newdata=dpred3)
dpred4$pred <- predict(ddunn, type="response", newdata=dpred4)

names(dpred1)[1] <- "difference"
dpred1$variable <- "Binned Distance"
names(dpred2)[1] <- "difference"
dpred2$variable <- "Minimum Separation"
names(dpred3)[1] <- "difference"
dpred3$variable <- "Average Separation"
names(dpred4)[1] <- "difference"
dpred4$variable <- "Dunn Distance (Min Sep/Max Spread)"
# 
dpred <- rbind(dpred1, dpred2, dpred3, dpred4)
dpred$variable <- factor(dpred$variable, levels = c("Minimum Separation", "Average Separation","Binned Distance", "Dunn Distance (Min Sep/Max Spread)"))


### Facetted Plots
prop.diff <- subset(prop.dist, select = c(pic_name, diff.dms, diff.das, diff.dbn, diff.ddunn, prop, m.time, med.time, shape))
prop.diff <- data.frame(prop.diff)
prop.diff.m <- melt(prop.diff, id.vars=c("pic_name", "prop", "m.time", "med.time", "shape"), measure.vars = c("diff.dms", "diff.das", "diff.dbn", "diff.ddunn"))

levels(prop.diff.m$variable) <- c("Minimum Separation", "Average Separation","Binned Distance", "Dunn Distance (Min Sep/Max Spread)")


ggplot(aes(x=value, y=prop), data=prop.diff.m) + 
  facet_wrap( ~ variable, scales = "free_x", nrow=1) + 
  geom_vline(xintercept = 0, col = "grey50") +
  geom_line(aes(difference, pred), data=dpred, colour="steelblue", size=1) +
  geom_point(aes(shape=factor(shape)), size=3) +
  xlab(expression(paste(delta,"-Difference",sep=""))) + ylab("Detection Rate") +
  geom_smooth(se=FALSE, method='loess', linetype=2, colour="steelblue") + 
  theme(legend.position = "none")
@
\end{subfigure}
\begin{subfigure}[t]{\textwidth}
\caption{$\gamma$-number of extreme null plots}
\centering
<<largep-gamma, echo=FALSE, dependson='t7-distr', out.width='\\textwidth', fig.width=12.5, fig.height=3.5>>=
### Facetted Plots
prop.grtr <- subset(prop.dist, select = c(pic_name, grtr.dms, grtr.das, grtr.dbn,  prop, grtr.ddunn, m.time, med.time, shape))

prop.grtr.m <- melt(data.frame(prop.grtr), id.vars = c("pic_name", "prop", "m.time", "med.time", "shape"))

levels(prop.grtr.m$variable) <- c("Minimum Separation", "Average Separation","Binned Distance", "Dunn Distance (Min Sep/Max Spread)")
prop.grtr.m$variable <- factor(prop.grtr.m$variable, levels = c("Minimum Separation", "Average Separation","Binned Distance", "Dunn Distance (Min Sep/Max Spread)"))

ggplot(aes(x=value, y=prop), data=prop.grtr.m) + 
  geom_point(aes(shape=factor(shape)), size=3) +
  xlab(expression(paste(gamma,"-number of extreme null plots",sep=""))) + ylab("Detection Rate") +
  facet_wrap( ~ variable, scales = "free_x", nrow=1) + 
  theme(legend.position = "none")
@
\end{subfigure}

	\vspace{-.1in}
\caption{Comparison of distance metrics for the scatterplot with clusters. Detection rate is plotted against (a) $\delta$-difference and (b) against $\gamma$-number of extreme nulls, using distances based on minimum separation, average separation, binned and Dunn's distance. The vertical line represents the difference equal to zero when there is at least one null plot similar to the observed plot. Solid blue line represents the fitted logistic regression model and the dashed blue line shows a loess smoother.  Detection rate generally increases with $\delta$-difference. As the $\gamma$-number of extreme null plots increases, detection rate decreases. The triangle represents a lineup with high detection rate and negative difference based on the average separation distance. This is examined in Figure~\ref{lp-exp}. }
\label{lp-comp}
\end{figure}

In Figure~\ref{lp-comp}, the detection rate is plotted against the difference for distance based on minimum separation, average separation and the binned distance. The  vertical line shows a difference equal to zero.  It can be seen that as the difference increases, the detection rate increases and all distances do a reasonably good job in capturing the response of the subjects. In terms of the logistic regression fit to the data, average separation is a bit ahead according to AIC (AIC: \Sexpr{round(AIC(das), 1)}) 
compared to minimal separation  (AIC: \Sexpr{round(AIC(dms), 1)}) 
and binned distance (AIC: \Sexpr{round(AIC(dbn), 1)}). Dunn separation, motivated from cognitive perception, comes in at a maybe surprising last place (AIC: \Sexpr{round(AIC(ddunn), 1)}).

In (b) it can be seen that as there are more extreme null plots compared to the observed plot, the subjects find it difficult to pick the observed plot. For a few lineups, a large number of the subjects identify the observed plot although there is more extreme null plots. 

\begin{figure}[!h]
\centering
<<largep-mtime, echo=FALSE, dependson='t7-distr', out.width='\\textwidth', fig.width=12.5, fig.height=3.5>>=
### Facetted Plots
ggplot(aes(x=value, y=med.time), data=prop.diff.m) + 
  geom_vline(xintercept = 0, col = "grey50") +
  geom_point(aes(shape=factor(shape)), size=3) +
  xlab(expression(paste(delta,"-Difference",sep=""))) + ylab("Median time to respond (in seconds)") + ylim(c(0,80)) +
  facet_wrap( ~ variable, scales = "free_x", nrow = 1) + 
  theme(legend.position = "none") + 
  geom_smooth(se=FALSE, aes(group=variable), method='loess')
@

	\vspace{-.1in}
\caption{Plot showing the median time to respond by the subjects against the difference based on the minimum separation distance, average separation and binned distance. The vertical line represents the difference equal to 0 when there is at least one null plot similar to the observed plot. The median time decreases as the difference increases.  }
\label{lp-mtime}
\end{figure}

Figure~\ref{lp-mtime} shows the relationship between the median time observers take to respond  and $\delta$-difference for the three different distances. It can be clearly seen that there is a strong negative association; as the difference increases,  subjects take less time to respond. 
For both average separation and binned distance we see a peak in response time, i.e.\ for large negative $\delta$-difference the median time to respond decreases again.

<<dist-prep-t7, dependson='t7-distances', cache=FALSE, echo=FALSE>>=
dists <- read.csv("data/reference-distances-turk7-100-30.csv")
pos <- 20
submetrics <- subset(metrics, pic_name == "plot_large_p_small_n_30_100_0_2_3.png")
submetrics <- subset(submetrics, pos.1 != pos.2 & pos.2 != pos)
dd3 <- submetrics %>% group_by(pos.1) %>% summarize(
  dbn.mean = mean(dbn),
  das.mean =  mean(das),
  dms.mean = mean(dms),
  dmin.mean = mean(dmin),
  ddunn.mean = mean(ddunn),
  len=n())

@


\begin{figure}[!p]

\begin{subfigure}[t]{\textwidth}
\caption{Lineup of scatterplots of three groups. Which plot shows the best separation? \hfill}
\centering
\begin{subfigure}[b]{0.6\textwidth}
<<lp-exc-t7, echo=FALSE, fig.width=6, fig.height=6, out.width='\\textwidth'>>=
lpt7 <- read.table("data/turk7/dat_large_p_small_n_30_100_0_2_3.txt", header=TRUE)
raw7 <- read.csv("data/raw_data_turk7.csv")
lpsub <- subset(raw7, pic_name=="plot_large_p_small_n_30_100_0_2_3.png")
dt <- data.frame(xtabs(~response_no, data=lpsub))
names(dt) <- c(".sample", "picks")
picks <- data.frame(.sample=1:20)
picks <- merge(picks, dt, by=".sample", all.x=TRUE)
picks$picks[is.na(picks$picks)] <- 0

ggplot(data=lpt7, aes(x=X1, y=X2, colour=factor(cl))) + 
         geom_point(size=2) +
         facet_wrap(~.sample, ncol=5) + 
  theme_lineup +
  theme(legend.position="none") +
  geom_text(aes(label=picks), x=2.4, y=-1.8, data=picks, colour="grey70", 
            size=8, hjust=1)
@
\end{subfigure}
\begin{subfigure}[b]{0.3\textwidth}
\caption{Binned (5,5) Distance}
<<bin55, echo=FALSE, dependson='dist-prep-t7', out.width = '\\textwidth', fig.width=4.5, fig.height=4>>=
ymax <- max(density(dists$dbn)$y)

ggplot() + 
  geom_density(data = dists, aes(x = dbn), 
               fill = "grey80", col = "grey80" ) +
      xlab("") + ylab("")  +
  geom_segment(data = subset(dd3, len != 19), 
             aes(x = dbn.mean, xend = dbn.mean, 
                 y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
             size=1, alpha = I(0.7)) + 
  geom_segment(data = subset(dd3, len == 19), 
             aes(x = dbn.mean, xend = dbn.mean, 
                 y = 0.005*ymax, yend = 0.2*ymax), 
             size=1, alpha = I(0.7), colour="darkorange") +
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = dbn.mean, label = pos.1)) +
  geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
            colour="darkorange", aes(x = dbn.mean, label = pos.1)) 
@
\end{subfigure}
\end{subfigure}%\hfill

\begin{subfigure}[t]{\textwidth} 
\centering
\begin{subfigure}[t]{0.3\textwidth}
\caption{Minimum Separation}
<<min_sep, echo=FALSE, dependson='dist-prep-t7', out.width = '\\textwidth', fig.width=4.5, fig.height=4>>=
ymax <- max(density(dists$dms)$y)

ggplot() + 
  geom_density(data = dists, aes(x = dms), 
               fill = "grey80", col = "grey80" ) +
  xlab("") + ylab("")  +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = dms.mean, xend = dms.mean, 
                   y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
               size=1, alpha = I(0.7)) + 
  geom_segment(data = subset(dd3, len == 19), 
               aes(x = dms.mean, xend = dms.mean, 
                   y = 0.005*ymax, yend = 0.2*ymax), 
               size=1, alpha = I(0.7), colour="darkorange") +
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = dms.mean, label = pos.1)) +
  geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
            colour="darkorange", aes(x = dms.mean, label = pos.1)) 
@
\end{subfigure} 
\begin{subfigure}[t]{0.3\textwidth}
\caption{Average Separation}
<<avg_sep, echo=FALSE, dependson='dist-prep-t7', out.width = '\\textwidth', fig.width=4.5, fig.height=4>>=
ymax <- max(density(dists$das)$y)

ggplot() + 
  geom_density(data = dists, aes(x = das), 
               fill = "grey80", col = "grey80" ) +
  xlab("") + ylab("")  +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = das.mean, xend = das.mean, 
                   y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
               size=1, alpha = I(0.7)) +
  geom_segment(data = subset(dd3, len == 19), 
               aes(x = das.mean, xend = das.mean, 
                   y = 0.005*ymax, yend = 0.2*ymax), 
               size=1, alpha = I(0.7), colour="darkorange") +
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = das.mean, label = pos.1)) +
  geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
            colour="darkorange", aes(x = das.mean, label = pos.1)) 
@
\end{subfigure} 
\begin{subfigure}[t]{0.3\textwidth}
\caption{Dunn Separation}
<<dunn_sep, echo=FALSE, dependson='dist-prep-t7', out.width = '\\textwidth', fig.width=4.5, fig.height=4>>=
ymax <- max(density(dists$ddunn)$y)

ggplot() + 
  geom_density(data = dists, aes(x = ddunn), 
               fill = "grey80", col = "grey80" ) +
  xlab("") + ylab("")  +
  geom_segment(data = subset(dd3, len != 19), 
               aes(x = ddunn.mean, xend = ddunn.mean, 
                   y = rep(0.005*ymax,19), yend = rep(0.1*ymax,19)), 
               size=1, alpha = I(0.7)) +
  geom_segment(data = subset(dd3, len == 19), 
               aes(x = ddunn.mean, xend = ddunn.mean, 
                   y = 0.005*ymax, yend = 0.2*ymax), 
               size=1, alpha = I(0.7), colour="darkorange") +
  geom_text(data = subset(dd3, len != 19), y = - 0.03*ymax, size = 2.5, 
            aes(x = ddunn.mean, label = pos.1)) +
  geom_text(data = subset(dd3, len == 19), y = 0.25*ymax, size = 3, 
            colour="darkorange", aes(x = ddunn.mean, label = pos.1)) 
@
\end{subfigure} 
\end{subfigure}
	\vspace{-.1in}
\caption{Illustration of the behavior of different distance metrics. The lineup is shown in (a) and the distributions of different distance metrics are shown in the other plots:  binned distance with 6 and 4 bins in x and y axis respectively in (b), distance based on minimum separation in (c), distance based on average separation in (d) and distance based on Dunn separation in (e). Grey numbers on the lineup show the counts of subject choices. The reference distributions are based on 100 null sets of 19 nulls each, yielding 1,800 distances.}
\label{lp-exp}
\end{figure}

Figure~\ref{lp-exp} shows the lineup in a high dimension, low sample size setting. The number of dimensions used is 100 and two of the dimensions have some separation. Plot \#20 shows the two-dimensional projections of the original data. This plot is, indeed, chosen in 13 out of 19 evaluations.  As the true plot does have real separation, it is to be expected that  subjects would be able to identify the plot. The distance based on average separation yields a negative difference showing that the lineup is difficult, while the distance based on minimum separation yields a positive difference. The distance metrics identify different characteristics in a plot. The average separation looks at the average of the distances of the points in a cluster to the points in other clusters.  Dunn separation performs very well in this example and correctly identifies the data panel as the panel with the strongest signal. While the binned distance shows plot \#20 as the one with the largest distance, this should be taken with care, because binned distance is, unlike the other two distances, not rotation invariant. In the case of plot \#20 the large distance merely indicates the difference in the arrangement of the clusters rather than their separation.


\section{Conclusion}
Distance metrics are compared to the response of human subjects on lineups. What we see in each of the experiments is that the general approach of the binned distance, while mostly performing decently, is usually out-done by a distance that is more tailored to the question of interest or takes the graphical elements into account. These data derived from a special collection of experiments where the task was very focused, but when the lineup is used in practice the question will be generic and we would expect the binned distance to be most broadly applicable. 

Different distance metrics better matched subjects' choices for the different plot types. Boxplot distance better matched subject choices in experiment I. Regression based distance matched better than binned distance for the subject choices in experiment II. By the $\gamma$-number, minimum separation and average separation matched subjects' choices better than the other distance metrics for experiment III. 
None of the distance metrics perfectly matches subject choices. This suggests that there is a lot of scope for exploring new ways to numerically characterize structure in plots. The metrics we have described were all based on the data, rather than the graphical elements in the plot. Utilizing the graphical elements, e.g. length of line relative the plot size to build metrics might provide a closer fit, and also help to understand more precisely what viewers are visually responding to in the plot. The lineup protocol provides a rigorous way to assess metrics on data plots with human vision. The examination of subject choices with metrics as done here provides a guide for assessing metrics systematically.

One of the purposes for developing the distance metrics discussed in this paper was to help in future experiments designed to assess visual inference with lineups. Being able to roughly divide lineups into three groups -- easy, moderate, difficult -- is useful for compiling blocks for subjects to evaluate. Subjects are typically given a block of ten lineups to evaluate. If all ten are difficult it is possible to frustrate the observer, and having ten easy lineups doesn't effectively harness the human resources. being able to roughy grade a lineup into these categories makes it easier  provide a reasonable set for each subject.  It is clear from this study that they are good for this rough categorization. 

\paragraph{Acknowledgement:}

 All plots are done with the {\tt ggplot2} \citep{hadley:2009} package in R. The document is written in {\tt knitr} \citep{xie:2015}.

%\section{References}
\begin{center}
{\large\bf SUPPLEMENTARY MATERIAL}
\end{center}

\begin{description}

\item[Software:] R-package {\tt nullabor} containing code to create lineups and calculate the distance measures described in the article.  Available on CRAN \citep{CRAN}, with development versions at \url{https://github.com/dicook/nullabor}. 
\item[Reproducibility:] All the code and anonymized data used in this analysis is available at \url{https://github.com/niladrir/metrics-paper}.
\item[Experiments:] \url{http://hofmann.public.iastate.edu/experiments.html} provides the resources from the experiments studied. 

\end{description}

\bibliographystyle{asa}
\bibliography{references}

\end{document}
